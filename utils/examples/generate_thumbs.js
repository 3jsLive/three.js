/**
 * @author callumprentice / https://callum.com/

    Generates thumbnails for visual page of examples.
    Uses: Node 10.16, npm 6.13
          Google Puppeteer 2.0.0 (npm)
          Sharp 0.23.2 (npm)
    Todo:
        * add link to example source in html
        * see if files.js can be pulled in more elegantly
*/

const puppeteer = require('puppeteer');
const sharp = require('sharp');
const os = require('os');
const fs = require('fs');

// variables you might want to change
const source_page_width = 1280;
const source_page_height = 800;
const thumb_width = 320;
const thumb_height = 200;
const default_capture_delay = 1000;
const base_example_url = 'https://threejs.org/examples/';
var files_js_source = '../../examples/files.js'

// check command line for alternative to files.js
if (process.argv.length > 2) {
    files_js_source = process.argv[2];
}
console.log("Reading example names from", files_js_source);

// JS gymnastics required (I think) to pull in autogenerated files.js
const vm = require('vm');
var data = fs.readFileSync(files_js_source);
const script = new vm.Script(data);
script.runInThisContext();

// Tweak an example to give it a better chance of being
// captured in a way that is representative of the example.
// e.g. add more (or less) time before a capture is taken
// or insert a click on a selector go get past some
// examples with audio that need interaction
// (might also consider a Chrome switch to turn
// off audio interaction click requirement)
var tweaks = [
    {
        example: 'webgl_loader_gltf_extensions',
        capture_delay: 5000
    },
    {
        example: 'webgl_animation_multiple',
        capture_delay: 5000
    },
    {
        example: 'webaudio_orientation',
        click_selector: 'button',
        capture_delay: 3000
    },
    {
        example: 'webaudio_visualizer',
        click_selector: 'button',
        capture_delay: 3000
    },
    {
        example: 'webaudio_timing',
        click_selector: 'button',
        capture_delay: 3000
    },
    {
        example: 'webaudio_sandbox',
        click_selector: 'button',
        capture_delay: 3000
    },
    {
        example: 'webgl_loader_fbx',
        capture_delay: 3000
    },
    {
        example: 'webgl_loader_mmd_audio',
        capture_delay: 5000
    },
    {
        example: 'webgl_loader_mmd',
        capture_delay: 4000
    },
    {
        example: 'webgl_loader_draco',
        capture_delay: 5000
    },
    {
        example: 'webgl_loader_gltf',
        capture_delay: 7000
    },
    {
        example: 'webgl_loader_vrm',
        capture_delay: 5000
    },
    {
        example: 'webgl_materials_cars',
        capture_delay: 5000
    },
    {
        example: 'webgl_materials_envmaps_parallax',
        capture_delay: 7000
    },
    {
        example: 'webgl_materials_translucency',
        capture_delay: 5000
    },
    {
        example: 'webgl2_materials_texture2darray',
        capture_delay: 3000
    },
    {
        example: 'webvr_cubes',
        capture_delay: 3000
    },
    {
        example: 'webgl_materials_video',
        click_selector: 'button',
        capture_delay: 3000
    },
    {
        example: 'webgl_loader_x',
        capture_delay: 4000
    },
    {
        example: 'webgl_loader_3mf_materials',
        capture_delay: 4000
    },
    {
        example: 'webgl_loader_collada_kinematics',
        capture_delay: 4000
    },
    {
        example: 'webgl_loader_collada_skinning',
        capture_delay: 4000
    },
    {
        example: 'webgl_loader_imagebitmap',
        capture_delay: 4000
    },
    {
        example: 'webgl_loader_lwo',
        capture_delay: 4000
    },

];

// write thumbnails directly into example directory
var thumb_dir = '../../examples/thumbs/';
if (!fs.existsSync(thumb_dir)) {
    fs.mkdirSync(thumb_dir);
}

function delay(timeout) {
    return new Promise(resolve => {
        setTimeout(resolve, timeout);
    });
}

(async () => {
    const browser = await puppeteer.launch({
        defaultViewport: {
            width: source_page_width,
            height: source_page_height
        }
    });

    const page = await browser.newPage();

    for (var key in files) {
        for (var i = 0; i < files[key].length; i++) {
            var filename_base = files[key][i];
            console.log('Working on:', filename_base);

            const example_url = base_example_url + filename_base + '.html';
            await page.goto(example_url);

            var delay_ms = default_capture_delay;

            // see if we need to apply a tweak to this example
            tweaks.forEach(function(tweak) {
                if (tweak.example == filename_base) {
                    if (tweak.capture_delay != undefined) {
                        delay_ms = tweak.capture_delay;
                        console.log('    modifying delay before capture to', delay_ms, 'ms');
                    }
                    if (tweak.click_selector != undefined) {
                        console.log('    injecting click to selector: ', tweak.click_selector);
                        page.waitForSelector(tweak.click_selector);
                        page.click(tweak.click_selector);
                    }
                }
            });

            await delay(delay_ms);

            // capture original screenshot in the system tmp dir
            // since we don't need it after the thumbnail is created
            const shot_dir = os.tmpdir();

            // capture a screenshot with PNG for lossless scaling next
            var shot_path = shot_dir + filename_base + '.png';
            //console.log("Writing screenshot to", shot_path);

            await page.screenshot({path: shot_path});

            // write the thumbnail as a jpg
            var thumb_base = thumb_dir + filename_base + '.jpg';
            //console.log("Writing thumb to", thumb_base);
            await sharp(shot_path)
                .resize(thumb_width, thumb_height)
                .toFile(thumb_base, function(err) {
                    //console.log("Error writing thumb: ", err)
                });
        }
    }

    await browser.close();
})();
