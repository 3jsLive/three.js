{
  "en": {
    "Manual": {
      "Getting Started": {
        "Creating a scene": {
          "url": "manual/en/introduction/Creating-a-scene",
          "methods": [],
          "props": []
        },
        "Installation": {
          "url": "manual/en/introduction/Installation",
          "methods": [],
          "props": []
        },
        "Browser support": {
          "url": "manual/en/introduction/Browser-support",
          "methods": [],
          "props": []
        },
        "WebGL compatibility check": {
          "url": "manual/en/introduction/WebGL-compatibility-check",
          "methods": [],
          "props": []
        },
        "How to run things locally": {
          "url": "manual/en/introduction/How-to-run-things-locally",
          "methods": [],
          "props": []
        },
        "Drawing lines": {
          "url": "manual/en/introduction/Drawing-lines",
          "methods": [],
          "props": []
        },
        "Creating text": {
          "url": "manual/en/introduction/Creating-text",
          "methods": [],
          "props": []
        },
        "Loading 3D models": {
          "url": "manual/en/introduction/Loading-3D-models",
          "methods": [],
          "props": []
        },
        "Libraries and Plugins": {
          "url": "manual/en/introduction/Libraries-and-Plugins",
          "methods": [],
          "props": []
        },
        "FAQ": {
          "url": "manual/en/introduction/FAQ",
          "methods": [],
          "props": []
        },
        "Useful links": {
          "url": "manual/en/introduction/Useful-links",
          "methods": [],
          "props": []
        }
      },
      "Next Steps": {
        "How to update things": {
          "url": "manual/en/introduction/How-to-update-things",
          "methods": [],
          "props": []
        },
        "How to dispose of objects": {
          "url": "manual/en/introduction/How-to-dispose-of-objects",
          "methods": [],
          "props": []
        },
        "How to create VR content": {
          "url": "manual/en/introduction/How-to-create-VR-content",
          "methods": [],
          "props": []
        },
        "How to use post-processing": {
          "url": "manual/en/introduction/How-to-use-post-processing",
          "methods": [],
          "props": []
        },
        "Matrix transformations": {
          "url": "manual/en/introduction/Matrix-transformations",
          "methods": [],
          "props": []
        },
        "Animation system": {
          "url": "manual/en/introduction/Animation-system",
          "methods": [],
          "props": []
        }
      },
      "Build Tools": {
        "Testing with NPM": {
          "url": "manual/en/buildTools/Testing-with-NPM",
          "methods": [],
          "props": []
        }
      }
    },
    "Reference": {
      "Animation": {
        "AnimationAction": {
          "url": "api/en/animation/AnimationAction",
          "methods": [
            "crossFadeFrom",
            "crossFadeTo",
            "fadeIn",
            "fadeOut",
            "getEffectiveTimeScale",
            "getEffectiveWeight",
            "getClip",
            "getMixer",
            "getRoot",
            "halt",
            "isRunning",
            "isScheduled",
            "play",
            "reset",
            "setDuration",
            "setEffectiveTimeScale",
            "setEffectiveWeight",
            "setLoop",
            "startAt",
            "stop",
            "stopFading",
            "stopWarping",
            "syncWith",
            "warp"
          ],
          "props": [
            "clampWhenFinished",
            "enabled",
            "loop",
            "paused",
            "repetitions",
            "time",
            "timeScale",
            "weight",
            "zeroSlopeAtEnd",
            "zeroSlopeAtStart"
          ]
        },
        "AnimationClip": {
          "url": "api/en/animation/AnimationClip",
          "methods": [
            "clone",
            "optimize",
            "resetDuration",
            "toJSON",
            "trim",
            "validate",
            "CreateClipsFromMorphTargetSequences",
            "CreateFromMorphTargetSequence",
            "findByName",
            "parse",
            "parseAnimation",
            "toJSON"
          ],
          "props": ["duration", "name", "tracks", "uuid"]
        },
        "AnimationMixer": {
          "url": "api/en/animation/AnimationMixer",
          "methods": [
            "clipAction",
            "existingAction",
            "getRoot",
            "stopAllAction",
            "update",
            "setTime",
            "uncacheClip",
            "uncacheRoot",
            "uncacheAction"
          ],
          "props": ["time", "timeScale"]
        },
        "AnimationObjectGroup": {
          "url": "api/en/animation/AnimationObjectGroup",
          "methods": ["add", "remove", "uncache"],
          "props": ["stats", "uuid"]
        },
        "AnimationUtils": {
          "url": "api/en/animation/AnimationUtils",
          "methods": [
            "arraySlice",
            "convertArray",
            "flattenJSON",
            "getKeyframeOrder",
            "isTypedArray",
            "sortedArray",
            "subclip"
          ],
          "props": []
        },
        "KeyframeTrack": {
          "url": "api/en/animation/KeyframeTrack",
          "methods": [
            "clone",
            "createInterpolant",
            "getInterpolation",
            "getValueSize",
            "InterpolantFactoryMethodDiscrete",
            "InterpolantFactoryMethodLinear",
            "InterpolantFactoryMethodSmooth",
            "optimize",
            "scale",
            "setInterpolation",
            "shift",
            "trim",
            "validate",
            "toJSON"
          ],
          "props": [
            "name",
            "times",
            "values",
            "DefaultInterpolation",
            "TimeBufferType ",
            "ValueBufferType "
          ]
        },
        "PropertyBinding": {
          "url": "api/en/animation/PropertyBinding",
          "methods": [
            "getValue",
            "setValue",
            "bind",
            "unbind",
            "Composite",
            "create",
            "parseTrackName",
            "findNode"
          ],
          "props": [
            "path",
            "parsedPath",
            "node",
            "rootNode",
            "BindingType",
            "Versioning",
            "GetterByBindingType",
            "SetterByBindingTypeAndVersioning"
          ]
        },
        "PropertyMixer": {
          "url": "api/en/animation/PropertyMixer",
          "methods": [
            "accumulate",
            "apply",
            "saveOriginalState",
            "restoreOriginalState"
          ],
          "props": [
            "binding",
            "buffer",
            "cumulativeWeight",
            "valueSize",
            "referenceCount",
            "useCount"
          ]
        }
      },
      "Animation / Tracks": {
        "BooleanKeyframeTrack": {
          "url": "api/en/animation/tracks/BooleanKeyframeTrack",
          "methods": [
            "InterpolantFactoryMethodLinear ",
            "InterpolantFactoryMethodSmooth "
          ],
          "props": ["DefaultInterpolation", "ValueBufferType", "ValueTypeName"]
        },
        "ColorKeyframeTrack": {
          "url": "api/en/animation/tracks/ColorKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        },
        "NumberKeyframeTrack": {
          "url": "api/en/animation/tracks/NumberKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        },
        "QuaternionKeyframeTrack": {
          "url": "api/en/animation/tracks/QuaternionKeyframeTrack",
          "methods": ["InterpolantFactoryMethodLinear"],
          "props": ["DefaultInterpolation", "ValueTypeName"]
        },
        "StringKeyframeTrack": {
          "url": "api/en/animation/tracks/StringKeyframeTrack",
          "methods": [
            "InterpolantFactoryMethodLinear",
            "InterpolantFactoryMethodSmooth"
          ],
          "props": ["DefaultInterpolation", "ValueBufferType", "ValueTypeName"]
        },
        "VectorKeyframeTrack": {
          "url": "api/en/animation/tracks/VectorKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        }
      },
      "Audio": {
        "Audio": {
          "url": "api/en/audio/Audio",
          "methods": [
            "connect",
            "disconnect",
            "getFilter",
            "getFilters",
            "getLoop",
            "getOutput",
            "getPlaybackRate",
            "getVolume",
            "play",
            "pause",
            "onEnded",
            "setBuffer",
            "setFilter",
            "setFilters",
            "setLoop",
            "setLoopStart",
            "setLoopEnd",
            "setMediaElementSource",
            "setMediaStreamSource",
            "setNodeSource",
            "setPlaybackRate",
            "setVolume",
            "stop"
          ],
          "props": [
            "autoplay",
            "context",
            "detune",
            "filters",
            "gain",
            "hasPlaybackControl",
            "isPlaying",
            "listener",
            "playbackRate",
            "offset",
            "duration",
            "source",
            "sourceType",
            "type"
          ]
        },
        "AudioAnalyser": {
          "url": "api/en/audio/AudioAnalyser",
          "methods": ["getFrequencyData", "getAverageFrequency"],
          "props": ["analyser", "fftSize", "data"]
        },
        "AudioContext": {
          "url": "api/en/audio/AudioContext",
          "methods": ["getContext", "setContext"],
          "props": []
        },
        "AudioListener": {
          "url": "api/en/audio/AudioListener",
          "methods": [
            "getInput",
            "removeFilter",
            "getFilter",
            "setFilter",
            "getMasterVolume",
            "setMasterVolume"
          ],
          "props": ["context", "gain", "filter", "timeDelta"]
        },
        "PositionalAudio": {
          "url": "api/en/audio/PositionalAudio",
          "methods": [
            "getOutput",
            "getRefDistance",
            "setRefDistance",
            "getRolloffFactor",
            "setRolloffFactor",
            "getDistanceModel",
            "setDistanceModel",
            "getMaxDistance",
            "setMaxDistance",
            "setDirectionalCone"
          ],
          "props": ["panner"]
        }
      },
      "Cameras": {
        "ArrayCamera": {
          "url": "api/en/cameras/ArrayCamera",
          "methods": [],
          "props": ["cameras"]
        },
        "Camera": {
          "url": "api/en/cameras/Camera",
          "methods": ["clone", "copy", "getWorldDirection"],
          "props": [
            "layers",
            "matrixWorldInverse",
            "projectionMatrix",
            "projectionMatrixInverse"
          ]
        },
        "CubeCamera": {
          "url": "api/en/cameras/CubeCamera",
          "methods": ["update"],
          "props": ["renderTarget"]
        },
        "OrthographicCamera": {
          "url": "api/en/cameras/OrthographicCamera",
          "methods": [
            "setViewOffset",
            "clearViewOffset",
            "updateProjectionMatrix",
            "toJSON"
          ],
          "props": [
            "bottom",
            "far",
            "left",
            "near",
            "right",
            "top",
            "view",
            "zoom"
          ]
        },
        "PerspectiveCamera": {
          "url": "api/en/cameras/PerspectiveCamera",
          "methods": [
            "clearViewOffset",
            "getEffectiveFOV",
            "getFilmHeight",
            "getFilmWidth",
            "getFocalLength",
            "setFocalLength",
            "setViewOffset",
            "updateProjectionMatrix",
            "toJSON"
          ],
          "props": [
            "aspect",
            "far",
            "filmGauge",
            "filmOffset",
            "focus",
            "fov",
            "near",
            "view",
            "zoom"
          ]
        },
        "StereoCamera": {
          "url": "api/en/cameras/StereoCamera",
          "methods": ["update"],
          "props": ["aspect", "eyeSep", "cameraL", "cameraR"]
        }
      },
      "Constants": {
        "Animation": {
          "url": "api/en/constants/Animation",
          "methods": [],
          "props": []
        },
        "Core": { "url": "api/en/constants/Core", "methods": [], "props": [] },
        "CustomBlendingEquation": {
          "url": "api/en/constants/CustomBlendingEquations",
          "methods": [],
          "props": []
        },
        "Materials": {
          "url": "api/en/constants/Materials",
          "methods": [],
          "props": []
        },
        "Renderer": {
          "url": "api/en/constants/Renderer",
          "methods": [],
          "props": []
        },
        "Textures": {
          "url": "api/en/constants/Textures",
          "methods": [],
          "props": []
        }
      },
      "Core": {
        "BufferAttribute": {
          "url": "api/en/core/BufferAttribute",
          "methods": [
            "applyMatrix3",
            "applyMatrix4",
            "applyNormalMatrix",
            "transformDirection",
            "clone",
            "copy",
            "copyArray",
            "copyAt",
            "copyColorsArray",
            "copyVector2sArray",
            "copyVector3sArray",
            "copyVector4sArray",
            "getX",
            "getY",
            "getZ",
            "getW",
            "onUpload",
            "set",
            "setUsage",
            "setX",
            "setY",
            "setZ",
            "setW",
            "setXY",
            "setXYZ",
            "setXYZW"
          ],
          "props": [
            "array",
            "count",
            "itemSize",
            "name",
            "needsUpdate",
            "normalized",
            "onUploadCallback",
            "updateRange",
            "usage",
            "version"
          ]
        },
        "BufferGeometry": {
          "url": "api/en/core/BufferGeometry",
          "methods": [
            "setAttribute",
            "addGroup",
            "applyMatrix4",
            "center",
            "clone",
            "copy",
            "clearGroups",
            "computeBoundingBox",
            "computeBoundingSphere",
            "computeTangents",
            "computeVertexNormals",
            "dispose",
            "getAttribute",
            "getIndex",
            "hasAttribute",
            "lookAt",
            "merge",
            "normalizeNormals",
            "deleteAttribute",
            "rotateX",
            "rotateY",
            "rotateZ",
            "scale",
            "setIndex",
            "setDrawRange",
            "setFromPoints",
            "toJSON",
            "toNonIndexed",
            "translate"
          ],
          "props": [
            "attributes",
            "boundingBox",
            "boundingSphere",
            "drawRange",
            "groups",
            "drawcalls",
            "id",
            "index",
            "morphAttributes",
            "morphTargetsRelative",
            "name",
            "userData",
            "uuid"
          ]
        },
        "Clock": {
          "url": "api/en/core/Clock",
          "methods": ["start", "stop", "getElapsedTime", "getDelta"],
          "props": [
            "autoStart",
            "startTime",
            "oldTime",
            "elapsedTime",
            "running"
          ]
        },
        "EventDispatcher": {
          "url": "api/en/core/EventDispatcher",
          "methods": [
            "addEventListener",
            "hasEventListener",
            "removeEventListener",
            "dispatchEvent"
          ],
          "props": []
        },
        "GLBufferAttribute": {
          "url": "api/en/core/GLBufferAttribute",
          "methods": ["setBuffer", "setType", "setItemSize", "setCount"],
          "props": [
            "buffer",
            "count",
            "itemSize",
            "elementSize",
            "type",
            "isGLBufferAttribute",
            "version",
            "needsUpdate"
          ]
        },
        "InstancedBufferAttribute": {
          "url": "api/en/core/InstancedBufferAttribute",
          "methods": [],
          "props": ["meshPerAttribute"]
        },
        "InstancedBufferGeometry": {
          "url": "api/en/core/InstancedBufferGeometry",
          "methods": [],
          "props": ["instanceCount"]
        },
        "InstancedInterleavedBuffer": {
          "url": "api/en/core/InstancedInterleavedBuffer",
          "methods": [],
          "props": ["meshPerAttribute"]
        },
        "InterleavedBuffer": {
          "url": "api/en/core/InterleavedBuffer",
          "methods": ["copy", "copyAt", "set", "clone", "setUsage", "toJSON"],
          "props": [
            "array",
            "stride",
            "count",
            "updateRange",
            "uuid",
            "version",
            "needsUpdate",
            "usage"
          ]
        },
        "InterleavedBufferAttribute": {
          "url": "api/en/core/InterleavedBufferAttribute",
          "methods": [
            "applyMatrix4",
            "applyNormalMatrix",
            "transformDirection",
            "getX",
            "getY",
            "getZ",
            "getW",
            "setX",
            "setY",
            "setZ",
            "setW",
            "setXY",
            "setXYZ",
            "setXYZW"
          ],
          "props": [
            "data",
            "array",
            "count",
            "itemSize",
            "name",
            "needsUpdate",
            "normalized",
            "offset"
          ]
        },
        "Layers": {
          "url": "api/en/core/Layers",
          "methods": [
            "disable",
            "enable",
            "set",
            "test",
            "toggle",
            "enableAll",
            "disableAll"
          ],
          "props": ["mask"]
        },
        "Object3D": {
          "url": "api/en/core/Object3D",
          "methods": [
            "add",
            "applyMatrix4",
            "applyQuaternion",
            "attach",
            "clone",
            "copy",
            "getObjectById",
            "getObjectByName",
            "getObjectByProperty",
            "getWorldPosition",
            "getWorldQuaternion",
            "getWorldScale",
            "getWorldDirection",
            "localToWorld",
            "lookAt",
            "lookAt",
            "raycast",
            "remove",
            "clear",
            "rotateOnAxis",
            "rotateOnWorldAxis",
            "rotateX",
            "rotateY",
            "rotateZ",
            "setRotationFromAxisAngle",
            "setRotationFromEuler",
            "setRotationFromMatrix",
            "setRotationFromQuaternion",
            "toJSON",
            "translateOnAxis",
            "translateX",
            "translateY",
            "translateZ",
            "traverse",
            "traverseVisible",
            "traverseAncestors",
            "updateMatrix",
            "updateMatrixWorld",
            "updateWorldMatrix",
            "worldToLocal"
          ],
          "props": [
            "animations",
            "castShadow",
            "children",
            "customDepthMaterial",
            "customDistanceMaterial",
            "frustumCulled",
            "id",
            "layers",
            "matrix",
            "matrixAutoUpdate",
            "matrixWorld",
            "matrixWorldNeedsUpdate",
            "modelViewMatrix",
            "name",
            "normalMatrix",
            "onAfterRender",
            "onBeforeRender",
            "parent",
            "position",
            "quaternion",
            "receiveShadow",
            "renderOrder",
            "rotation",
            "scale",
            "up",
            "userData",
            "uuid",
            "visible",
            "DefaultUp",
            "DefaultMatrixAutoUpdate"
          ]
        },
        "Raycaster": {
          "url": "api/en/core/Raycaster",
          "methods": [
            "set",
            "setFromCamera",
            "intersectObject",
            "intersectObjects"
          ],
          "props": ["far", "near", "camera", "layers", "params", "ray"]
        },
        "Uniform": {
          "url": "api/en/core/Uniform",
          "methods": ["clone"],
          "props": ["value"]
        }
      },
      "Core / BufferAttributes": {
        "BufferAttribute Types": {
          "url": "api/en/core/bufferAttributeTypes/BufferAttributeTypes",
          "methods": [],
          "props": []
        }
      },
      "Extras": {
        "DataUtils": {
          "url": "api/en/extras/DataUtils",
          "methods": ["toHalfFloat"],
          "props": []
        },
        "Earcut": {
          "url": "api/en/extras/Earcut",
          "methods": ["triangulate"],
          "props": []
        },
        "ImageUtils": {
          "url": "api/en/extras/ImageUtils",
          "methods": ["getDataURL"],
          "props": []
        },
        "PMREMGenerator": {
          "url": "api/en/extras/PMREMGenerator",
          "methods": [
            "fromScene",
            "fromEquirectangular",
            "fromCubemap",
            "compileCubemapShader",
            "compileEquirectangularShader",
            "dispose"
          ],
          "props": []
        },
        "ShapeUtils": {
          "url": "api/en/extras/ShapeUtils",
          "methods": ["area", "isClockWise", "triangulateShape"],
          "props": []
        }
      },
      "Extras / Core": {
        "Curve": {
          "url": "api/en/extras/core/Curve",
          "methods": [
            "getPoint",
            "getPointAt",
            "getPoints",
            "getSpacedPoints",
            "getLength",
            "getLengths",
            "updateArcLengths",
            "getUtoTmapping",
            "getTangent",
            "getTangentAt",
            "computeFrenetFrames",
            "clone",
            "copy",
            "toJSON",
            "fromJSON"
          ],
          "props": ["arcLengthDivisions"]
        },
        "CurvePath": {
          "url": "api/en/extras/core/CurvePath",
          "methods": [
            "add",
            "closePath",
            "getCurveLengths",
            "getPoint",
            "getPoints",
            "getSpacedPoints"
          ],
          "props": ["curves", "autoClose"]
        },
        "Font": {
          "url": "api/en/extras/core/Font",
          "methods": ["generateShapes"],
          "props": ["data"]
        },
        "Interpolations": {
          "url": "api/en/extras/core/Interpolations",
          "methods": ["CatmullRom", "QuadraticBezier", "CubicBezier"],
          "props": []
        },
        "Path": {
          "url": "api/en/extras/core/Path",
          "methods": [
            "absarc",
            "absellipse",
            "arc",
            "bezierCurveTo",
            "ellipse",
            "lineTo",
            "moveTo",
            "quadraticCurveTo",
            "setFromPoints",
            "splineThru"
          ],
          "props": ["currentPoint"]
        },
        "Shape": {
          "url": "api/en/extras/core/Shape",
          "methods": ["extractPoints", "getPointsHoles"],
          "props": ["uuid", "holes"]
        },
        "ShapePath": {
          "url": "api/en/extras/core/ShapePath",
          "methods": [
            "moveTo",
            "lineTo",
            "quadraticCurveTo",
            "bezierCurveTo",
            "splineThru",
            "toShapes"
          ],
          "props": ["subPaths", "currentPath", "color"]
        }
      },
      "Extras / Curves": {
        "ArcCurve": {
          "url": "api/en/extras/curves/ArcCurve",
          "methods": [],
          "props": []
        },
        "CatmullRomCurve3": {
          "url": "api/en/extras/curves/CatmullRomCurve3",
          "methods": [],
          "props": ["points", "closed", "curveType", "tension"]
        },
        "CubicBezierCurve": {
          "url": "api/en/extras/curves/CubicBezierCurve",
          "methods": [],
          "props": ["v0", "v1", "v2", "v3"]
        },
        "CubicBezierCurve3": {
          "url": "api/en/extras/curves/CubicBezierCurve3",
          "methods": [],
          "props": ["v0", "v1", "v2", "v3"]
        },
        "EllipseCurve": {
          "url": "api/en/extras/curves/EllipseCurve",
          "methods": [],
          "props": [
            "aX",
            "aY",
            "xRadius",
            "yRadius",
            "aStartAngle",
            "aEndAngle",
            "aClockwise",
            "aRotation"
          ]
        },
        "LineCurve": {
          "url": "api/en/extras/curves/LineCurve",
          "methods": [],
          "props": ["v1", "v2"]
        },
        "LineCurve3": {
          "url": "api/en/extras/curves/LineCurve3",
          "methods": [],
          "props": ["v1", "v2"]
        },
        "QuadraticBezierCurve": {
          "url": "api/en/extras/curves/QuadraticBezierCurve",
          "methods": [],
          "props": ["v0", "v1", "v2"]
        },
        "QuadraticBezierCurve3": {
          "url": "api/en/extras/curves/QuadraticBezierCurve3",
          "methods": [],
          "props": ["v0", "v1", "v2"]
        },
        "SplineCurve": {
          "url": "api/en/extras/curves/SplineCurve",
          "methods": [],
          "props": ["points"]
        }
      },
      "Extras / Objects": {
        "ImmediateRenderObject": {
          "url": "api/en/extras/objects/ImmediateRenderObject",
          "methods": ["render"],
          "props": [
            "material",
            "hasPositions",
            "hasNormals",
            "hasColors",
            "hasUvs",
            "positionArray",
            "normalArray",
            "colorArray",
            "uvArray",
            "count"
          ]
        }
      },
      "Geometries": {
        "BoxGeometry": {
          "url": "api/en/geometries/BoxGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "CircleGeometry": {
          "url": "api/en/geometries/CircleGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "ConeGeometry": {
          "url": "api/en/geometries/ConeGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "CylinderGeometry": {
          "url": "api/en/geometries/CylinderGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "DodecahedronGeometry": {
          "url": "api/en/geometries/DodecahedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "EdgesGeometry": {
          "url": "api/en/geometries/EdgesGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "ExtrudeGeometry": {
          "url": "api/en/geometries/ExtrudeGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "IcosahedronGeometry": {
          "url": "api/en/geometries/IcosahedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "LatheGeometry": {
          "url": "api/en/geometries/LatheGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "OctahedronGeometry": {
          "url": "api/en/geometries/OctahedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "ParametricGeometry": {
          "url": "api/en/geometries/ParametricGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "PlaneGeometry": {
          "url": "api/en/geometries/PlaneGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "PolyhedronGeometry": {
          "url": "api/en/geometries/PolyhedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "RingGeometry": {
          "url": "api/en/geometries/RingGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "ShapeGeometry": {
          "url": "api/en/geometries/ShapeGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "SphereGeometry": {
          "url": "api/en/geometries/SphereGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "TetrahedronGeometry": {
          "url": "api/en/geometries/TetrahedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "TextGeometry": {
          "url": "api/en/geometries/TextGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "TorusGeometry": {
          "url": "api/en/geometries/TorusGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "TorusKnotGeometry": {
          "url": "api/en/geometries/TorusKnotGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "TubeGeometry": {
          "url": "api/en/geometries/TubeGeometry",
          "methods": [],
          "props": ["parameters", "tangents", "normals", "binormals"]
        },
        "WireframeGeometry": {
          "url": "api/en/geometries/WireframeGeometry",
          "methods": [],
          "props": []
        }
      },
      "Helpers": {
        "ArrowHelper": {
          "url": "api/en/helpers/ArrowHelper",
          "methods": ["setColor", "setLength", "setDirection"],
          "props": ["line", "cone"]
        },
        "AxesHelper": {
          "url": "api/en/helpers/AxesHelper",
          "methods": [],
          "props": []
        },
        "BoxHelper": {
          "url": "api/en/helpers/BoxHelper",
          "methods": ["update", "setFromObject"],
          "props": []
        },
        "Box3Helper": {
          "url": "api/en/helpers/Box3Helper",
          "methods": ["updateMatrixWorld"],
          "props": ["box"]
        },
        "CameraHelper": {
          "url": "api/en/helpers/CameraHelper",
          "methods": ["update"],
          "props": ["camera", "pointMap", "matrix", "matrixAutoUpdate"]
        },
        "DirectionalLightHelper": {
          "url": "api/en/helpers/DirectionalLightHelper",
          "methods": ["dispose", "update"],
          "props": [
            "lightPlane",
            "light",
            "matrix",
            "matrixAutoUpdate",
            "color"
          ]
        },
        "GridHelper": {
          "url": "api/en/helpers/GridHelper",
          "methods": [],
          "props": []
        },
        "PolarGridHelper": {
          "url": "api/en/helpers/PolarGridHelper",
          "methods": [],
          "props": []
        },
        "HemisphereLightHelper": {
          "url": "api/en/helpers/HemisphereLightHelper",
          "methods": ["dispose", "update"],
          "props": ["light", "matrix", "matrixAutoUpdate", "color"]
        },
        "PlaneHelper": {
          "url": "api/en/helpers/PlaneHelper",
          "methods": ["updateMatrixWorld"],
          "props": ["plane", "size"]
        },
        "PointLightHelper": {
          "url": "api/en/helpers/PointLightHelper",
          "methods": ["dispose", "update"],
          "props": ["light", "matrix", "matrixAutoUpdate", "color"]
        },
        "SkeletonHelper": {
          "url": "api/en/helpers/SkeletonHelper",
          "methods": [],
          "props": ["bones", "root"]
        },
        "SpotLightHelper": {
          "url": "api/en/helpers/SpotLightHelper",
          "methods": ["dispose", "update"],
          "props": ["cone", "light", "matrix", "matrixAutoUpdate", "color"]
        }
      },
      "Lights": {
        "AmbientLight": {
          "url": "api/en/lights/AmbientLight",
          "methods": [],
          "props": []
        },
        "AmbientLightProbe": {
          "url": "api/en/lights/AmbientLightProbe",
          "methods": [],
          "props": []
        },
        "DirectionalLight": {
          "url": "api/en/lights/DirectionalLight",
          "methods": ["copy"],
          "props": ["castShadow", "position", "shadow", "target"]
        },
        "HemisphereLight": {
          "url": "api/en/lights/HemisphereLight",
          "methods": ["copy"],
          "props": ["color", "groundColor", "position"]
        },
        "HemisphereLightProbe": {
          "url": "api/en/lights/HemisphereLightProbe",
          "methods": [],
          "props": []
        },
        "Light": {
          "url": "api/en/lights/Light",
          "methods": ["copy", "toJSON"],
          "props": ["color", "intensity"]
        },
        "LightProbe": {
          "url": "api/en/lights/LightProbe",
          "methods": [],
          "props": ["sh"]
        },
        "PointLight": {
          "url": "api/en/lights/PointLight",
          "methods": ["copy"],
          "props": ["decay", "distance", "power", "shadow"]
        },
        "RectAreaLight": {
          "url": "api/en/lights/RectAreaLight",
          "methods": ["copy"],
          "props": []
        },
        "SpotLight": {
          "url": "api/en/lights/SpotLight",
          "methods": ["copy"],
          "props": [
            "angle",
            "castShadow",
            "decay",
            "distance",
            "penumbra",
            "position",
            "power",
            "shadow",
            "target"
          ]
        }
      },
      "Lights / Shadows": {
        "LightShadow": {
          "url": "api/en/lights/shadows/LightShadow",
          "methods": [
            "getFrameExtents",
            "updateMatrices",
            "getFrustum",
            "getViewportCount",
            "copy",
            "clone",
            "toJSON"
          ],
          "props": [
            "autoUpdate",
            "camera",
            "bias",
            "map",
            "mapPass",
            "mapSize",
            "matrix",
            "needsUpdate",
            "normalBias",
            "radius"
          ]
        },
        "PointLightShadow": {
          "url": "api/en/lights/shadows/PointLightShadow",
          "methods": ["updateMatrices"],
          "props": []
        },
        "DirectionalLightShadow": {
          "url": "api/en/lights/shadows/DirectionalLightShadow",
          "methods": [],
          "props": ["camera"]
        },
        "SpotLightShadow": {
          "url": "api/en/lights/shadows/SpotLightShadow",
          "methods": [],
          "props": ["camera", "focus"]
        }
      },
      "Loaders": {
        "AnimationLoader": {
          "url": "api/en/loaders/AnimationLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "AudioLoader": {
          "url": "api/en/loaders/AudioLoader",
          "methods": ["load"],
          "props": []
        },
        "BufferGeometryLoader": {
          "url": "api/en/loaders/BufferGeometryLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "Cache": {
          "url": "api/en/loaders/Cache",
          "methods": ["add", "get", "remove", "clear"],
          "props": ["enabled", "files"]
        },
        "CompressedTextureLoader": {
          "url": "api/en/loaders/CompressedTextureLoader",
          "methods": ["load"],
          "props": []
        },
        "CubeTextureLoader": {
          "url": "api/en/loaders/CubeTextureLoader",
          "methods": ["load"],
          "props": []
        },
        "DataTextureLoader": {
          "url": "api/en/loaders/DataTextureLoader",
          "methods": ["load"],
          "props": []
        },
        "FileLoader": {
          "url": "api/en/loaders/FileLoader",
          "methods": ["load", "setMimeType", "setResponseType"],
          "props": ["mimeType", "responseType"]
        },
        "FontLoader": {
          "url": "api/en/loaders/FontLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "ImageBitmapLoader": {
          "url": "api/en/loaders/ImageBitmapLoader",
          "methods": ["load", "setOptions"],
          "props": ["options"]
        },
        "ImageLoader": {
          "url": "api/en/loaders/ImageLoader",
          "methods": ["load"],
          "props": []
        },
        "Loader": {
          "url": "api/en/loaders/Loader",
          "methods": [
            "load",
            "loadAsync",
            "parse",
            "setCrossOrigin",
            "setWithCredentials",
            "setPath",
            "setResourcePath",
            "setRequestHeader"
          ],
          "props": [
            "crossOrigin",
            "withCredentials",
            "manager",
            "path",
            "resourcePath",
            "requestHeader"
          ]
        },
        "LoaderUtils": {
          "url": "api/en/loaders/LoaderUtils",
          "methods": ["decodeText", "extractUrlBase"],
          "props": []
        },
        "MaterialLoader": {
          "url": "api/en/loaders/MaterialLoader",
          "methods": ["load", "parse", "setTextures"],
          "props": ["textures"]
        },
        "ObjectLoader": {
          "url": "api/en/loaders/ObjectLoader",
          "methods": [
            "load",
            "parse",
            "parseGeometries",
            "parseMaterials",
            "parseAnimations",
            "parseImages",
            "parseTextures",
            "parseObject"
          ],
          "props": []
        },
        "TextureLoader": {
          "url": "api/en/loaders/TextureLoader",
          "methods": ["load"],
          "props": []
        }
      },
      "Loaders / Managers": {
        "DefaultLoadingManager": {
          "url": "api/en/loaders/managers/DefaultLoadingManager",
          "methods": [],
          "props": []
        },
        "LoadingManager": {
          "url": "api/en/loaders/managers/LoadingManager",
          "methods": [
            "addHandler",
            "getHandler",
            "removeHandler",
            "resolveURL",
            "setURLModifier",
            "itemStart",
            "itemEnd",
            "itemError"
          ],
          "props": ["onStart", "onLoad", "onProgress", "onError"]
        }
      },
      "Materials": {
        "LineBasicMaterial": {
          "url": "api/en/materials/LineBasicMaterial",
          "methods": [],
          "props": ["color", "linewidth", "linecap", "linejoin", "morphTargets"]
        },
        "LineDashedMaterial": {
          "url": "api/en/materials/LineDashedMaterial",
          "methods": [],
          "props": ["dashSize", "gapSize", "scale"]
        },
        "Material": {
          "url": "api/en/materials/Material",
          "methods": [
            "clone",
            "copy",
            "dispose",
            "onBeforeCompile",
            "customProgramCacheKey",
            "setValues",
            "toJSON"
          ],
          "props": [
            "alphaTest",
            "alphaToCoverage",
            "blendDst",
            "blendDstAlpha",
            "blendEquation",
            "blendEquationAlpha",
            "blending",
            "blendSrc",
            "blendSrcAlpha",
            "clipIntersection",
            "clippingPlanes",
            "clipShadows",
            "colorWrite",
            "defines",
            "depthFunc",
            "depthTest",
            "depthWrite",
            "stencilWrite",
            "stencilWriteMask",
            "stencilFunc",
            "stencilRef",
            "stencilFuncMask",
            "stencilFail",
            "stencilZFail",
            "stencilZPass",
            "fog",
            "id",
            "name",
            "needsUpdate",
            "opacity",
            "polygonOffset",
            "polygonOffsetFactor",
            "polygonOffsetUnits",
            "precision",
            "premultipliedAlpha",
            "dithering",
            "shadowSide",
            "side",
            "toneMapped",
            "transparent",
            "type",
            "uuid",
            "version",
            "needsUpdate",
            "vertexColors",
            "visible",
            "userData"
          ]
        },
        "MeshBasicMaterial": {
          "url": "api/en/materials/MeshBasicMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "color",
            "combine",
            "envMap",
            "lightMap",
            "lightMapIntensity",
            "map",
            "morphTargets",
            "reflectivity",
            "refractionRatio",
            "skinning",
            "specularMap",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "MeshDepthMaterial": {
          "url": "api/en/materials/MeshDepthMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "depthPacking",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "fog",
            "map",
            "morphTargets",
            "skinning",
            "wireframe",
            "wireframeLinewidth"
          ]
        },
        "MeshDistanceMaterial": {
          "url": "api/en/materials/MeshDistanceMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "farDistance",
            "fog",
            "map",
            "morphTargets",
            "nearDistance",
            "referencePosition",
            "skinning"
          ]
        },
        "MeshLambertMaterial": {
          "url": "api/en/materials/MeshLambertMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "color",
            "combine",
            "emissive",
            "emissiveMap",
            "emissiveIntensity",
            "envMap",
            "lightMap",
            "lightMapIntensity",
            "map",
            "morphNormals",
            "morphTargets",
            "reflectivity",
            "refractionRatio",
            "skinning",
            "specularMap",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "MeshMatcapMaterial": {
          "url": "api/en/materials/MeshMatcapMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "bumpMap",
            "bumpScale",
            "color",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "flatShading",
            "map",
            "matcap",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "skinning"
          ]
        },
        "MeshNormalMaterial": {
          "url": "api/en/materials/MeshNormalMaterial",
          "methods": [],
          "props": [
            "bumpMap",
            "bumpScale",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "flatShading",
            "fog",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "skinning",
            "wireframe",
            "wireframeLinewidth"
          ]
        },
        "MeshPhongMaterial": {
          "url": "api/en/materials/MeshPhongMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "bumpMap",
            "bumpScale",
            "color",
            "combine",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "emissive",
            "emissiveMap",
            "emissiveIntensity",
            "envMap",
            "flatShading",
            "lightMap",
            "lightMapIntensity",
            "map",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "reflectivity",
            "refractionRatio",
            "shininess",
            "skinning",
            "specular",
            "specularMap",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "MeshPhysicalMaterial": {
          "url": "api/en/materials/MeshPhysicalMaterial",
          "methods": [],
          "props": [
            "clearcoat",
            "clearcoatMap",
            "clearcoatNormalMap",
            "clearcoatNormalScale",
            "clearcoatRoughness",
            "clearcoatRoughnessMap",
            "defines",
            "ior",
            "reflectivity",
            "sheen",
            "transmission",
            "transmissionMap"
          ]
        },
        "MeshStandardMaterial": {
          "url": "api/en/materials/MeshStandardMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "bumpMap",
            "bumpScale",
            "color",
            "defines",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "emissive",
            "emissiveMap",
            "emissiveIntensity",
            "envMap",
            "envMapIntensity",
            "flatShading",
            "lightMap",
            "lightMapIntensity",
            "map",
            "metalness",
            "metalnessMap",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "refractionRatio",
            "roughness",
            "roughnessMap",
            "skinning",
            "vertexTangents",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "MeshToonMaterial": {
          "url": "api/en/materials/MeshToonMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "bumpMap",
            "bumpScale",
            "color",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "emissive",
            "emissiveMap",
            "emissiveIntensity",
            "gradientMap",
            "lightMap",
            "lightMapIntensity",
            "map",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "skinning",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "PointsMaterial": {
          "url": "api/en/materials/PointsMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "color",
            "map",
            "morphTargets",
            "size",
            "sizeAttenuation"
          ]
        },
        "RawShaderMaterial": {
          "url": "api/en/materials/RawShaderMaterial",
          "methods": [],
          "props": []
        },
        "ShaderMaterial": {
          "url": "api/en/materials/ShaderMaterial",
          "methods": ["clone"],
          "props": [
            "clipping",
            "defaultAttributeValues",
            "defines",
            "extensions",
            "fog",
            "fragmentShader",
            "glslVersion",
            "index0AttributeName",
            "lights",
            "linewidth",
            "morphTargets",
            "morphNormals",
            "flatShading",
            "skinning",
            "uniforms",
            "uniformsNeedUpdate",
            "vertexColors",
            "vertexShader",
            "wireframe",
            "wireframeLinewidth"
          ]
        },
        "ShadowMaterial": {
          "url": "api/en/materials/ShadowMaterial",
          "methods": [],
          "props": ["transparent"]
        },
        "SpriteMaterial": {
          "url": "api/en/materials/SpriteMaterial",
          "methods": [],
          "props": ["alphaMap", "color", "map", "rotation", "sizeAttenuation"]
        }
      },
      "Math": {
        "Box2": {
          "url": "api/en/math/Box2",
          "methods": [
            "clampPoint",
            "clone",
            "containsBox",
            "containsPoint",
            "copy",
            "distanceToPoint",
            "equals",
            "expandByPoint",
            "expandByScalar",
            "expandByVector",
            "getCenter",
            "getParameter",
            "getSize",
            "intersect",
            "intersectsBox",
            "isEmpty",
            "makeEmpty",
            "set",
            "setFromCenterAndSize",
            "setFromPoints",
            "translate",
            "union"
          ],
          "props": ["min", "max"]
        },
        "Box3": {
          "url": "api/en/math/Box3",
          "methods": [
            "applyMatrix4",
            "clampPoint",
            "clone",
            "containsBox",
            "containsPoint",
            "copy",
            "distanceToPoint",
            "equals",
            "expandByObject",
            "expandByPoint",
            "expandByScalar",
            "expandByVector",
            "getBoundingSphere",
            "getCenter",
            "getParameter",
            "getSize",
            "intersect",
            "intersectsBox",
            "intersectsPlane",
            "intersectsSphere",
            "intersectsTriangle",
            "isEmpty",
            "makeEmpty",
            "set",
            "setFromArray",
            "setFromBufferAttribute",
            "setFromCenterAndSize",
            "setFromObject",
            "setFromPoints",
            "translate",
            "union"
          ],
          "props": ["min", "max"]
        },
        "Color": {
          "url": "api/en/math/Color",
          "methods": [
            "add",
            "addColors",
            "addScalar",
            "clone",
            "copy",
            "convertGammaToLinear",
            "convertLinearToGamma",
            "convertLinearToSRGB",
            "convertSRGBToLinear",
            "copyGammaToLinear",
            "copyLinearToGamma",
            "copyLinearToSRGB",
            "copySRGBToLinear",
            "equals",
            "fromArray",
            "fromBufferAttribute",
            "getHex",
            "getHexString",
            "getHSL",
            "getStyle",
            "lerp",
            "lerpColors",
            "lerpHSL",
            "multiply",
            "multiplyScalar",
            "offsetHSL",
            "set",
            "setHex",
            "setHSL",
            "setRGB",
            "setScalar",
            "setStyle",
            "setColorName",
            "sub",
            "toArray"
          ],
          "props": ["r", "g", "b"]
        },
        "Cylindrical": {
          "url": "api/en/math/Cylindrical",
          "methods": [
            "clone",
            "copy",
            "set",
            "setFromVector3",
            "setFromCartesianCoords"
          ],
          "props": ["radius", "theta", "y"]
        },
        "Euler": {
          "url": "api/en/math/Euler",
          "methods": [
            "copy",
            "clone",
            "equals",
            "fromArray",
            "reorder",
            "set",
            "setFromRotationMatrix",
            "setFromQuaternion",
            "setFromVector3",
            "toArray",
            "toVector3"
          ],
          "props": ["order", "x", "y", "z"]
        },
        "Frustum": {
          "url": "api/en/math/Frustum",
          "methods": [
            "clone",
            "containsPoint",
            "copy",
            "intersectsBox",
            "intersectsObject",
            "intersectsSphere",
            "intersectsSprite",
            "set",
            "setFromProjectionMatrix"
          ],
          "props": ["planes"]
        },
        "Interpolant": {
          "url": "api/en/math/Interpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        },
        "Line3": {
          "url": "api/en/math/Line3",
          "methods": [
            "applyMatrix4",
            "at",
            "clone",
            "closestPointToPoint",
            "closestPointToPointParameter",
            "copy",
            "delta",
            "distance",
            "distanceSq",
            "equals",
            "getCenter",
            "set"
          ],
          "props": ["start", "end"]
        },
        "MathUtils": {
          "url": "api/en/math/MathUtils",
          "methods": [
            "clamp",
            "degToRad",
            "euclideanModulo",
            "generateUUID",
            "isPowerOfTwo",
            "inverseLerp",
            "lerp",
            "damp",
            "mapLinear",
            "pingpong",
            "ceilPowerOfTwo",
            "floorPowerOfTwo",
            "radToDeg",
            "randFloat",
            "randFloatSpread",
            "randInt",
            "seededRandom",
            "smoothstep",
            "smootherstep",
            "setQuaternionFromProperEuler"
          ],
          "props": []
        },
        "Matrix3": {
          "url": "api/en/math/Matrix3",
          "methods": [
            "clone",
            "copy",
            "determinant",
            "equals",
            "extractBasis",
            "fromArray",
            "invert",
            "getNormalMatrix",
            "identity",
            "multiply",
            "multiplyMatrices",
            "multiplyScalar",
            "set",
            "premultiply",
            "setFromMatrix4",
            "setUvTransform",
            "toArray",
            "transpose",
            "transposeIntoArray"
          ],
          "props": ["elements"]
        },
        "Matrix4": {
          "url": "api/en/math/Matrix4",
          "methods": [
            "clone",
            "compose",
            "copy",
            "copyPosition",
            "decompose",
            "determinant",
            "equals",
            "extractBasis",
            "extractRotation",
            "fromArray",
            "invert",
            "getMaxScaleOnAxis",
            "identity",
            "lookAt",
            "makeRotationAxis",
            "makeBasis",
            "makePerspective",
            "makeOrthographic",
            "makeRotationFromEuler",
            "makeRotationFromQuaternion",
            "makeRotationX",
            "makeRotationY",
            "makeRotationZ",
            "makeScale",
            "makeShear",
            "makeTranslation",
            "multiply",
            "multiplyMatrices",
            "multiplyScalar",
            "premultiply",
            "scale",
            "set",
            "setFromMatrix3",
            "setPosition",
            "setPosition",
            "toArray",
            "transpose"
          ],
          "props": ["elements"]
        },
        "Plane": {
          "url": "api/en/math/Plane",
          "methods": [
            "applyMatrix4",
            "clone",
            "coplanarPoint",
            "copy",
            "distanceToPoint",
            "distanceToSphere",
            "equals",
            "intersectLine",
            "intersectsBox",
            "intersectsLine",
            "intersectsSphere",
            "negate",
            "normalize",
            "projectPoint",
            "set",
            "setComponents",
            "setFromCoplanarPoints",
            "setFromNormalAndCoplanarPoint",
            "translate"
          ],
          "props": ["normal", "constant"]
        },
        "Quaternion": {
          "url": "api/en/math/Quaternion",
          "methods": [
            "angleTo",
            "clone",
            "conjugate",
            "copy",
            "equals",
            "dot",
            "fromArray",
            "identity",
            "invert",
            "length",
            "lengthSq",
            "normalize",
            "multiply",
            "multiplyQuaternions",
            "premultiply",
            "rotateTowards",
            "slerp",
            "slerpQuaternions",
            "set",
            "setFromAxisAngle",
            "setFromEuler",
            "setFromRotationMatrix",
            "setFromUnitVectors",
            "toArray",
            "fromBufferAttribute",
            "slerpFlat"
          ],
          "props": ["x", "y", "z", "w"]
        },
        "Ray": {
          "url": "api/en/math/Ray",
          "methods": [
            "applyMatrix4",
            "at",
            "clone",
            "closestPointToPoint",
            "copy",
            "distanceSqToPoint",
            "distanceSqToSegment",
            "distanceToPlane",
            "distanceToPoint",
            "equals",
            "intersectBox",
            "intersectPlane",
            "intersectSphere",
            "intersectTriangle",
            "intersectsBox",
            "intersectsPlane",
            "intersectsSphere",
            "lookAt",
            "recast",
            "set"
          ],
          "props": ["origin", "direction"]
        },
        "Sphere": {
          "url": "api/en/math/Sphere",
          "methods": [
            "applyMatrix4",
            "clampPoint",
            "clone",
            "containsPoint",
            "copy",
            "distanceToPoint",
            "expandByPoint",
            "isEmpty",
            "makeEmpty",
            "equals",
            "getBoundingBox",
            "intersectsBox",
            "intersectsPlane",
            "intersectsSphere",
            "set",
            "setFromPoints",
            "translate",
            "union"
          ],
          "props": ["center", "radius"]
        },
        "Spherical": {
          "url": "api/en/math/Spherical",
          "methods": [
            "clone",
            "copy",
            "makeSafe",
            "set",
            "setFromVector3",
            "setFromCartesianCoords"
          ],
          "props": ["radius", "phi", "theta"]
        },
        "SphericalHarmonics3": {
          "url": "api/en/math/SphericalHarmonics3",
          "methods": [
            "add",
            "addScaledSH",
            "clone",
            "copy",
            "equals",
            "fromArray",
            "getAt",
            "getIrradianceAt",
            "lerp",
            "scale",
            "set",
            "toArray",
            "zero",
            "getBasisAt"
          ],
          "props": ["coefficients"]
        },
        "Triangle": {
          "url": "api/en/math/Triangle",
          "methods": [
            "clone",
            "closestPointToPoint",
            "containsPoint",
            "copy",
            "equals",
            "getArea",
            "getBarycoord",
            "getMidpoint",
            "getNormal",
            "getPlane",
            "intersectsBox",
            "set",
            "setFromPointsAndIndices"
          ],
          "props": ["a", "b", "c"]
        },
        "Vector2": {
          "url": "api/en/math/Vector2",
          "methods": [
            "add",
            "addScalar",
            "addScaledVector",
            "addVectors",
            "angle",
            "applyMatrix3",
            "ceil",
            "clamp",
            "clampLength",
            "clampScalar",
            "clone",
            "copy",
            "distanceTo",
            "manhattanDistanceTo",
            "distanceToSquared",
            "divide",
            "divideScalar",
            "dot",
            "cross",
            "equals",
            "floor",
            "fromArray",
            "fromBufferAttribute",
            "getComponent",
            "length",
            "manhattanLength",
            "lengthSq",
            "lerp",
            "lerpVectors",
            "negate",
            "normalize",
            "max",
            "min",
            "multiply",
            "multiplyScalar",
            "rotateAround",
            "round",
            "roundToZero",
            "set",
            "setComponent",
            "setLength",
            "setScalar",
            "setX",
            "setY",
            "sub",
            "subScalar",
            "subVectors",
            "toArray",
            "random"
          ],
          "props": ["height", "width", "x", "y"]
        },
        "Vector3": {
          "url": "api/en/math/Vector3",
          "methods": [
            "add",
            "addScalar",
            "addScaledVector",
            "addVectors",
            "applyAxisAngle",
            "applyEuler",
            "applyMatrix3",
            "applyMatrix4",
            "applyNormalMatrix",
            "applyQuaternion",
            "angleTo",
            "ceil",
            "clamp",
            "clampLength",
            "clampScalar",
            "clone",
            "copy",
            "cross",
            "crossVectors",
            "distanceTo",
            "manhattanDistanceTo",
            "distanceToSquared",
            "divide",
            "divideScalar",
            "dot",
            "equals",
            "floor",
            "fromArray",
            "fromBufferAttribute",
            "getComponent",
            "length",
            "manhattanLength",
            "lengthSq",
            "lerp",
            "lerpVectors",
            "max",
            "min",
            "multiply",
            "multiplyScalar",
            "multiplyVectors",
            "negate",
            "normalize",
            "project",
            "projectOnPlane",
            "projectOnVector",
            "reflect",
            "round",
            "roundToZero",
            "set",
            "setComponent",
            "setFromCylindrical",
            "setFromCylindricalCoords",
            "setFromMatrixColumn",
            "setFromMatrix3Column",
            "setFromMatrixPosition",
            "setFromMatrixScale",
            "setFromSpherical",
            "setFromSphericalCoords",
            "setLength",
            "setScalar",
            "setX",
            "setY",
            "setZ",
            "sub",
            "subScalar",
            "subVectors",
            "toArray",
            "transformDirection",
            "unproject",
            "random"
          ],
          "props": ["x", "y", "z"]
        },
        "Vector4": {
          "url": "api/en/math/Vector4",
          "methods": [
            "add",
            "addScalar",
            "addScaledVector",
            "addVectors",
            "applyMatrix4",
            "ceil",
            "clamp",
            "clampLength",
            "clampScalar",
            "clone",
            "copy",
            "divideScalar",
            "dot",
            "equals",
            "floor",
            "fromArray",
            "fromBufferAttribute",
            "getComponent",
            "length",
            "manhattanLength",
            "lengthSq",
            "lerp",
            "lerpVectors",
            "negate",
            "normalize",
            "max",
            "min",
            "multiply",
            "multiplyScalar",
            "round",
            "roundToZero",
            "set",
            "setAxisAngleFromQuaternion",
            "setAxisAngleFromRotationMatrix",
            "setComponent",
            "setLength",
            "setScalar",
            "setX",
            "setY",
            "setZ",
            "setW",
            "sub",
            "subScalar",
            "subVectors",
            "toArray",
            "random"
          ],
          "props": ["x", "y", "z", "w", "width", "height"]
        }
      },
      "Math / Interpolants": {
        "CubicInterpolant": {
          "url": "api/en/math/interpolants/CubicInterpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        },
        "DiscreteInterpolant": {
          "url": "api/en/math/interpolants/DiscreteInterpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        },
        "LinearInterpolant": {
          "url": "api/en/math/interpolants/LinearInterpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        },
        "QuaternionLinearInterpolant": {
          "url": "api/en/math/interpolants/QuaternionLinearInterpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        }
      },
      "Objects": {
        "Bone": {
          "url": "api/en/objects/Bone",
          "methods": [],
          "props": ["type"]
        },
        "Group": {
          "url": "api/en/objects/Group",
          "methods": [],
          "props": ["type"]
        },
        "InstancedMesh": {
          "url": "api/en/objects/InstancedMesh",
          "methods": [
            "dispose",
            "getColorAt",
            "getMatrixAt",
            "setColorAt",
            "setMatrixAt"
          ],
          "props": ["count", "instanceColor", "instanceMatrix"]
        },
        "Line": {
          "url": "api/en/objects/Line",
          "methods": [
            "computeLineDistances",
            "raycast",
            "clone",
            "updateMorphTargets"
          ],
          "props": [
            "geometry",
            "material",
            "morphTargetInfluences",
            "morphTargetDictionary"
          ]
        },
        "LineLoop": {
          "url": "api/en/objects/LineLoop",
          "methods": [],
          "props": []
        },
        "LineSegments": {
          "url": "api/en/objects/LineSegments",
          "methods": [],
          "props": []
        },
        "LOD": {
          "url": "api/en/objects/LOD",
          "methods": [
            "addLevel",
            "clone",
            "getCurrentLevel",
            "getObjectForDistance",
            "raycast",
            "toJSON",
            "update"
          ],
          "props": ["autoUpdate", "levels"]
        },
        "Mesh": {
          "url": "api/en/objects/Mesh",
          "methods": ["clone", "raycast", "updateMorphTargets"],
          "props": [
            "geometry",
            "material",
            "morphTargetInfluences",
            "morphTargetDictionary"
          ]
        },
        "Points": {
          "url": "api/en/objects/Points",
          "methods": ["raycast", "clone", "updateMorphTargets"],
          "props": [
            "geometry",
            "material",
            "morphTargetInfluences",
            "morphTargetDictionary"
          ]
        },
        "Skeleton": {
          "url": "api/en/objects/Skeleton",
          "methods": [
            "clone",
            "calculateInverses",
            "pose",
            "update",
            "getBoneByName",
            "dispose"
          ],
          "props": [
            "bones",
            "boneInverses",
            "boneMatrices",
            "boneTexture",
            "boneTextureSize"
          ]
        },
        "SkinnedMesh": {
          "url": "api/en/objects/SkinnedMesh",
          "methods": [
            "bind",
            "clone",
            "normalizeSkinWeights",
            "pose",
            "updateMatrixWorld"
          ],
          "props": ["bindMode", "bindMatrix", "bindMatrixInverse", "skeleton"]
        },
        "Sprite": {
          "url": "api/en/objects/Sprite",
          "methods": ["clone", "copy", "raycast"],
          "props": ["material", "center"]
        }
      },
      "Renderers": {
        "WebGLMultisampleRenderTarget": {
          "url": "api/en/renderers/WebGLMultisampleRenderTarget",
          "methods": [],
          "props": ["samples"]
        },
        "WebGLRenderer": {
          "url": "api/en/renderers/WebGLRenderer",
          "methods": [
            "clear",
            "clearColor",
            "clearDepth",
            "clearStencil",
            "compile",
            "copyFramebufferToTexture",
            "copyTextureToTexture",
            "copyTextureToTexture3D",
            "dispose",
            "forceContextLoss",
            "getClearAlpha",
            "getClearColor",
            "getContext",
            "getContextAttributes",
            "getActiveCubeFace",
            "getActiveMipmapLevel",
            "getRenderTarget",
            "getCurrentViewport",
            "getDrawingBufferSize",
            "getPixelRatio",
            "getScissor",
            "getScissorTest",
            "getSize",
            "getViewport",
            "initTexture",
            "resetGLState",
            "readRenderTargetPixels",
            "render",
            "renderBufferDirect",
            "renderBufferImmediate",
            "resetState",
            "setAnimationLoop",
            "setClearAlpha",
            "setClearColor",
            "setPixelRatio",
            "setRenderTarget",
            "setScissor",
            "setScissor",
            "setScissorTest",
            "setOpaqueSort",
            "setTransparentSort",
            "setSize",
            "setViewport",
            "setViewport"
          ],
          "props": [
            "autoClear",
            "autoClearColor",
            "autoClearDepth",
            "autoClearStencil",
            "capabilities",
            "maxVertexTextures",
            "clippingPlanes",
            "domElement",
            "extensions",
            "gammaFactor",
            "outputEncoding",
            "info",
            "localClippingEnabled",
            "physicallyCorrectLights",
            "properties",
            "renderLists",
            "shadowMap",
            "sortObjects",
            "state",
            "toneMapping",
            "toneMappingExposure",
            "xr"
          ]
        },
        "WebGL1Renderer": {
          "url": "api/en/renderers/WebGL1Renderer",
          "methods": [],
          "props": []
        },
        "WebGLRenderTarget": {
          "url": "api/en/renderers/WebGLRenderTarget",
          "methods": ["setSize", "clone", "copy", "dispose"],
          "props": [
            "width",
            "height",
            "scissor",
            "scissorTest",
            "viewport",
            "texture",
            "depthBuffer",
            "stencilBuffer",
            "depthTexture"
          ]
        },
        "WebGLCubeRenderTarget": {
          "url": "api/en/renderers/WebGLCubeRenderTarget",
          "methods": ["fromEquirectangularTexture", "clear"],
          "props": []
        }
      },
      "Renderers / Shaders": {
        "ShaderChunk": {
          "url": "api/en/renderers/shaders/ShaderChunk",
          "methods": [],
          "props": []
        },
        "ShaderLib": {
          "url": "api/en/renderers/shaders/ShaderLib",
          "methods": [],
          "props": []
        },
        "UniformsLib": {
          "url": "api/en/renderers/shaders/UniformsLib",
          "methods": [],
          "props": []
        },
        "UniformsUtils": {
          "url": "api/en/renderers/shaders/UniformsUtils",
          "methods": ["clone", "merge"],
          "props": []
        }
      },
      "Renderers / WebXR": {
        "WebXRManager": {
          "url": "api/en/renderers/webxr/WebXRManager",
          "methods": [
            "getController",
            "getControllerGrip",
            "setFramebufferScaleFactor",
            "setReferenceSpaceType"
          ],
          "props": ["enabled", "isPresenting"]
        }
      },
      "Scenes": {
        "Fog": {
          "url": "api/en/scenes/Fog",
          "methods": ["clone", "toJSON"],
          "props": ["name", "color", "near", "far"]
        },
        "FogExp2": {
          "url": "api/en/scenes/FogExp2",
          "methods": ["clone", "toJSON"],
          "props": ["name", "color", "density"]
        },
        "Scene": {
          "url": "api/en/scenes/Scene",
          "methods": ["toJSON"],
          "props": [
            "autoUpdate",
            "background",
            "environment",
            "fog",
            "overrideMaterial"
          ]
        }
      },
      "Textures": {
        "CanvasTexture": {
          "url": "api/en/textures/CanvasTexture",
          "methods": [],
          "props": ["needsUpdate"]
        },
        "CompressedTexture": {
          "url": "api/en/textures/CompressedTexture",
          "methods": [],
          "props": ["flipY", "generateMipmaps"]
        },
        "CubeTexture": {
          "url": "api/en/textures/CubeTexture",
          "methods": [],
          "props": []
        },
        "DataTexture": {
          "url": "api/en/textures/DataTexture",
          "methods": [],
          "props": ["image"]
        },
        "DataTexture2DArray": {
          "url": "api/en/textures/DataTexture2DArray",
          "methods": [],
          "props": ["image"]
        },
        "DataTexture3D": {
          "url": "api/en/textures/DataTexture3D",
          "methods": [],
          "props": ["wrapR"]
        },
        "DepthTexture": {
          "url": "api/en/textures/DepthTexture",
          "methods": [],
          "props": []
        },
        "Texture": {
          "url": "api/en/textures/Texture",
          "methods": [
            "updateMatrix",
            "clone",
            "toJSON",
            "dispose",
            "transformUv"
          ],
          "props": [
            "id",
            "uuid",
            "name",
            "image",
            "mipmaps",
            "mapping",
            "wrapS",
            "wrapT",
            "wrapS",
            "magFilter",
            "minFilter",
            "anisotropy",
            "format",
            "internalFormat",
            "type",
            "offset",
            "repeat",
            "rotation",
            "center",
            "matrixAutoUpdate",
            "matrix",
            "generateMipmaps",
            "premultiplyAlpha",
            "flipY",
            "unpackAlignment",
            "encoding",
            "version",
            "needsUpdate",
            "onUpdate",
            "needsUpdate"
          ]
        },
        "VideoTexture": {
          "url": "api/en/textures/VideoTexture",
          "methods": ["update"],
          "props": ["needsUpdate", "needsUpdate"]
        }
      }
    },
    "Examples": {
      "Animations": {
        "CCDIKSolver": {
          "url": "examples/en/animations/CCDIKSolver",
          "methods": ["createHelper", "update", "updateOne"],
          "props": ["iks", "mesh"]
        },
        "MMDAnimationHelper": {
          "url": "examples/en/animations/MMDAnimationHelper",
          "methods": ["add", "enable", "pose", "remove", "update"],
          "props": ["audio", "camera", "meshes", "objects", "onBeforePhysics"]
        },
        "MMDPhysics": {
          "url": "examples/en/animations/MMDPhysics",
          "methods": [
            "createHelper",
            "reset",
            "setGravity",
            "update",
            "warmup"
          ],
          "props": ["mesh"]
        }
      },
      "Controls": {
        "DeviceOrientationControls": {
          "url": "examples/en/controls/DeviceOrientationControls",
          "methods": ["connect", "disconnect", "dispose", "update"],
          "props": [
            "alphaOffset",
            "deviceOrientation",
            "enabled",
            "object",
            "screenOrientation"
          ]
        },
        "DragControls": {
          "url": "examples/en/controls/DragControls",
          "methods": ["activate", "deactivate", "dispose", "getObjects"],
          "props": ["enabled", "transformGroup"]
        },
        "FirstPersonControls": {
          "url": "examples/en/controls/FirstPersonControls",
          "methods": ["dispose", "handleResize", "lookAt", "lookAt", "update"],
          "props": [
            "activeLook",
            "autoForward",
            "constrainVertical",
            "domElement",
            "enabled",
            "heightCoef",
            "heightMax",
            "heightMin",
            "heightSpeed",
            "lookVertical",
            "lookSpeed",
            "mouseDragOn",
            "movementSpeed",
            "object",
            "verticalMax",
            "verticalMin"
          ]
        },
        "FlyControls": {
          "url": "examples/en/controls/FlyControls",
          "methods": ["dispose", "update"],
          "props": [
            "autoForward",
            "domElement",
            "dragToLook",
            "movementSpeed",
            "object",
            "rollSpeed"
          ]
        },
        "OrbitControls": {
          "url": "examples/en/controls/OrbitControls",
          "methods": [
            "dispose",
            "getAzimuthalAngle",
            "getPolarAngle",
            "listenToKeyEvents",
            "reset",
            "saveState",
            "update"
          ],
          "props": [
            "autoRotate",
            "autoRotateSpeed",
            "dampingFactor",
            "domElement",
            "enabled",
            "enableDamping",
            "enablePan",
            "enableRotate",
            "enableZoom",
            "keyPanSpeed",
            "keys",
            "maxAzimuthAngle",
            "maxDistance",
            "maxPolarAngle",
            "maxZoom",
            "minAzimuthAngle",
            "minDistance",
            "minPolarAngle",
            "minZoom",
            "mouseButtons",
            "object",
            "panSpeed",
            "position0",
            "rotateSpeed",
            "screenSpacePanning",
            "target0",
            "target",
            "touches",
            "zoom0",
            "zoomSpeed"
          ]
        },
        "PointerLockControls": {
          "url": "examples/en/controls/PointerLockControls",
          "methods": [
            "connect",
            "disconnect",
            "getDirection",
            "lock",
            "moveForward",
            "moveRight",
            "unlock"
          ],
          "props": ["domElement", "isLocked", "maxPolarAngle", "minPolarAngle"]
        },
        "TrackballControls": {
          "url": "examples/en/controls/TrackballControls",
          "methods": [
            "checkDistances",
            "dispose",
            "handleResize",
            "panCamera",
            "reset",
            "rotateCamera",
            "update",
            "zoomCamera"
          ],
          "props": [
            "domElement",
            "dynamicDampingFactor",
            "enabled",
            "keys",
            "maxDistance",
            "minDistance",
            "mouseButtons",
            "noPan",
            "noRotate",
            "noZoom",
            "object",
            "panSpeed",
            "rotateSpeed",
            "screen",
            "staticMoving",
            "zoomSpeed"
          ]
        },
        "TransformControls": {
          "url": "examples/en/controls/TransformControls",
          "methods": [
            "attach",
            "detach",
            "dispose",
            "getMode",
            "setMode",
            "setRotationSnap",
            "setSize",
            "setSpace",
            "setTranslationSnap"
          ],
          "props": [
            "axis",
            "camera",
            "domElement",
            "dragging",
            "enabled",
            "mode",
            "object",
            "rotationSnap",
            "showX",
            "showY",
            "showZ",
            "size",
            "space",
            "translationSnap"
          ]
        }
      },
      "Geometries": {
        "ConvexGeometry": {
          "url": "examples/en/geometries/ConvexGeometry",
          "methods": [],
          "props": []
        },
        "DecalGeometry": {
          "url": "examples/en/geometries/DecalGeometry",
          "methods": [],
          "props": []
        }
      },
      "Helpers": {
        "LightProbeHelper": {
          "url": "examples/en/helpers/LightProbeHelper",
          "methods": ["dispose"],
          "props": ["lightProbe", "size"]
        },
        "PositionalAudioHelper": {
          "url": "examples/en/helpers/PositionalAudioHelper",
          "methods": ["dispose", "update"],
          "props": [
            "audio",
            "range",
            "divisionsInnerAngle",
            "divisionsOuterAngle"
          ]
        },
        "RectAreaLightHelper": {
          "url": "examples/en/helpers/RectAreaLightHelper",
          "methods": ["dispose"],
          "props": ["light", "color"]
        },
        "VertexNormalsHelper": {
          "url": "examples/en/helpers/VertexNormalsHelper",
          "methods": ["update"],
          "props": ["matrixAutoUpdate", "object", "size"]
        },
        "VertexTangentsHelper": {
          "url": "examples/en/helpers/VertexTangentsHelper",
          "methods": ["update"],
          "props": ["matrixAutoUpdate", "object", "size"]
        }
      },
      "Lights": {
        "LightProbeGenerator": {
          "url": "examples/en/lights/LightProbeGenerator",
          "methods": ["fromCubeTexture", "fromCubeRenderTarget"],
          "props": []
        }
      },
      "Loaders": {
        "3DMLoader": {
          "url": "examples/en/loaders/3DMLoader",
          "methods": [
            "load",
            "parse",
            "setLibraryPath",
            "setWorkerLimit",
            "dispose"
          ],
          "props": []
        },
        "BasisTextureLoader": {
          "url": "examples/en/loaders/BasisTextureLoader",
          "methods": [
            "load",
            "detectSupport",
            "setTranscoderPath",
            "setWorkerLimit",
            "dispose"
          ],
          "props": []
        },
        "DRACOLoader": {
          "url": "examples/en/loaders/DRACOLoader",
          "methods": [
            "load",
            "setDecoderPath",
            "setDecoderConfig",
            "setWorkerLimit",
            "preload",
            "dispose"
          ],
          "props": []
        },
        "GLTFLoader": {
          "url": "examples/en/loaders/GLTFLoader",
          "methods": ["load", "setDRACOLoader", "setKTX2Loader", "parse"],
          "props": []
        },
        "KTX2Loader": {
          "url": "examples/en/loaders/KTX2Loader",
          "methods": [
            "load",
            "detectSupport",
            "setTranscoderPath",
            "setWorkerLimit",
            "dispose"
          ],
          "props": []
        },
        "MMDLoader": {
          "url": "examples/en/loaders/MMDLoader",
          "methods": [
            "load",
            "loadAnimation",
            "loadWithAnimation",
            "setAnimationPath"
          ],
          "props": []
        },
        "MTLLoader": {
          "url": "examples/en/loaders/MTLLoader",
          "methods": ["load", "setMaterialOptions", "parse"],
          "props": []
        },
        "OBJLoader": {
          "url": "examples/en/loaders/OBJLoader",
          "methods": ["load", "parse", "setMaterials"],
          "props": []
        },
        "PCDLoader": {
          "url": "examples/en/loaders/PCDLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "PDBLoader": {
          "url": "examples/en/loaders/PDBLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "PRWMLoader": {
          "url": "examples/en/loaders/PRWMLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "SVGLoader": {
          "url": "examples/en/loaders/SVGLoader",
          "methods": ["load", "createShapes"],
          "props": []
        },
        "TGALoader": {
          "url": "examples/en/loaders/TGALoader",
          "methods": ["load"],
          "props": []
        }
      },
      "Objects": {
        "Lensflare": {
          "url": "examples/en/objects/Lensflare",
          "methods": [],
          "props": []
        }
      },
      "Post-Processing": {
        "EffectComposer": {
          "url": "examples/en/postprocessing/EffectComposer",
          "methods": [
            "addPass",
            "insertPass",
            "isLastEnabledPass",
            "removePass",
            "render",
            "reset",
            "setPixelRatio",
            "setSize",
            "swapBuffers"
          ],
          "props": [
            "passes",
            "readBuffer",
            "renderer",
            "renderToScreen",
            "writeBuffer"
          ]
        }
      },
      "Exporters": {
        "GLTFExporter": {
          "url": "examples/en/exporters/GLTFExporter",
          "methods": ["parse"],
          "props": []
        },
        "PLYExporter": {
          "url": "examples/en/exporters/PLYExporter",
          "methods": ["parse"],
          "props": []
        },
        "ColladaExporter": {
          "url": "examples/en/exporters/ColladaExporter",
          "methods": ["parse"],
          "props": []
        }
      },
      "Math": {
        "LookupTable": {
          "url": "examples/en/math/Lut",
          "methods": [
            "copy",
            "setMin",
            "setMax",
            "changeNumberOfColors",
            "changeColorMap",
            "addColorMap",
            "getColor"
          ],
          "props": ["minV", "maxV"]
        },
        "MeshSurfaceSampler": {
          "url": "examples/en/math/MeshSurfaceSampler",
          "methods": ["setWeightAttribute", "build", "sample"],
          "props": []
        },
        "OBB": {
          "url": "examples/en/math/OBB",
          "methods": [
            "applyMatrix4",
            "clampPoint",
            "clone",
            "containsPoint",
            "copy",
            "equals",
            "fromBox3",
            "getSize",
            "intersectsBox3",
            "intersectsSphere",
            "intersectsOBB",
            "intersectsRay",
            "intersectRay",
            "set"
          ],
          "props": ["center", "halfSize", "rotation"]
        }
      },
      "ConvexHull": {
        "Face": {
          "url": "examples/en/math/convexhull/Face",
          "methods": ["create", "getEdge", "compute", "distanceToPoint"],
          "props": [
            "normal",
            "midpoint",
            "area",
            "constant",
            "outside",
            "mark",
            "edge"
          ]
        },
        "HalfEdge": {
          "url": "examples/en/math/convexhull/HalfEdge",
          "methods": ["head", "tail", "length", "lengthSquared", "setTwin"],
          "props": ["vertex", "prev", "next", "twin", "face"]
        },
        "ConvexHull": {
          "url": "examples/en/math/convexhull/ConvexHull",
          "methods": [
            "addAdjoiningFace",
            "addNewFaces",
            "addVertexToFace",
            "addVertexToHull",
            "cleanup",
            "compute",
            "computeExtremes",
            "computeHorizon",
            "computeInitialHull",
            "containsPoint",
            "deleteFaceVertices",
            "intersectRay",
            "intersectsRay",
            "makeEmpty",
            "nextVertexToAdd",
            "reindexFaces",
            "removeAllVerticesFromFace",
            "removeVertexFromFace",
            "resolveUnassignedPoints",
            "setFromObject",
            "setFromPoints"
          ],
          "props": [
            "assigned",
            "faces",
            "newFaces",
            "tolerance",
            "unassigned",
            "vertices"
          ]
        },
        "VertexNode": {
          "url": "examples/en/math/convexhull/VertexNode",
          "methods": [],
          "props": ["point", "prev", "next", "face"]
        },
        "VertexList": {
          "url": "examples/en/math/convexhull/VertexList",
          "methods": [
            "first",
            "last",
            "clear",
            "insertBefore",
            "insertAfter",
            "append",
            "appendChain",
            "remove",
            "removeSubList",
            "isEmpty"
          ],
          "props": ["head", "tail"]
        }
      },
      "Renderers": {
        "CSS2DRenderer": {
          "url": "examples/en/renderers/CSS2DRenderer",
          "methods": ["getSize", "render", "setSize"],
          "props": []
        },
        "CSS3DRenderer": {
          "url": "examples/en/renderers/CSS3DRenderer",
          "methods": ["getSize", "render", "setSize"],
          "props": []
        },
        "SVGRenderer": {
          "url": "examples/en/renderers/SVGRenderer",
          "methods": [
            "clear",
            "getSize",
            "render",
            "setClearColor",
            "setPrecision",
            "setQuality",
            "setSize"
          ],
          "props": ["overdraw"]
        }
      },
      "Utils": {
        "BufferGeometryUtils": {
          "url": "examples/en/utils/BufferGeometryUtils",
          "methods": [
            "mergeBufferGeometries",
            "mergeBufferAttributes",
            "interleaveAttributes",
            "estimateBytesUsed",
            "mergeVertices",
            "toTrianglesDrawMode",
            "computeMorphedAttributes"
          ],
          "props": []
        },
        "SceneUtils": {
          "url": "examples/en/utils/SceneUtils",
          "methods": [
            "createMeshesFromInstancedMesh",
            "createMultiMaterialObject"
          ],
          "props": []
        },
        "SkeletonUtils": {
          "url": "examples/en/utils/SkeletonUtils",
          "methods": [
            "clone",
            "findBoneTrackData",
            "getBoneByName",
            "getBones",
            "getEqualsBonesNames",
            "getHelperFromSkeleton",
            "getNearestBone",
            "getSkeletonOffsets",
            "renameBones",
            "retarget",
            "retargetClip"
          ],
          "props": []
        }
      }
    },
    "Developer Reference": {
      "Polyfills": {
        "Polyfills": { "url": "api/en/Polyfills", "methods": [], "props": [] }
      },
      "WebGLRenderer": {
        "WebGLProgram": {
          "url": "api/en/renderers/webgl/WebGLProgram",
          "methods": ["getUniforms", "getAttributes", "destroy"],
          "props": [
            "name",
            "id",
            "cacheKey",
            "usedTimes",
            "program",
            "vertexShader",
            "fragmentShader"
          ]
        },
        "WebGLShader": {
          "url": "api/en/renderers/webgl/WebGLShader",
          "methods": [],
          "props": []
        },
        "WebGLState": {
          "url": "api/en/renderers/webgl/WebGLState",
          "methods": [
            "enable",
            "disable",
            "setDepthTest",
            "setDepthWrite",
            "setBlending"
          ],
          "props": []
        }
      }
    }
  },
  "ar": {
    "الكتيب": {
      "البدء": {
        "إنشاء مشهد": {
          "url": "manual/ar/introduction/Creating-a-scene",
          "methods": [],
          "props": []
        },
        "التثبيت": {
          "url": "manual/ar/introduction/Installation",
          "methods": [],
          "props": []
        },
        "دعم المتصفح": {
          "url": "manual/ar/introduction/Browser-support",
          "methods": [],
          "props": []
        },
        "فحص توافق WebGL": {
          "url": "manual/ar/introduction/WebGL-compatibility-check",
          "methods": [],
          "props": []
        },
        "كيف تدير الأشياء محليًا": {
          "url": "manual/ar/introduction/How-to-run-things-locally",
          "methods": [],
          "props": []
        },
        "رسم خطوط": {
          "url": "manual/ar/introduction/Drawing-lines",
          "methods": [],
          "props": []
        },
        "إنشاء نص": {
          "url": "manual/ar/introduction/Creating-text",
          "methods": [],
          "props": []
        },
        "تحميل نماذج ثلاثية الأبعاد": {
          "url": "manual/ar/introduction/Loading-3D-models",
          "methods": [],
          "props": []
        },
        "الأسئلة الشائعة": {
          "url": "manual/ar/introduction/FAQ",
          "methods": [],
          "props": []
        },
        "روابط مفيدة": {
          "url": "manual/ar/introduction/Useful-links",
          "methods": [],
          "props": []
        }
      },
      "الخطوات التالية": {
        "كيفية تحديث الأشياء": {
          "url": "manual/ar/introduction/How-to-update-things",
          "methods": [],
          "props": []
        },
        "كيفية التخلص من الأشياء": {
          "url": "manual/ar/introduction/How-to-dispose-of-objects",
          "methods": [],
          "props": []
        },
        "كيفية إنشاء محتوى VR": {
          "url": "manual/ar/introduction/How-to-create-VR-content",
          "methods": [],
          "props": []
        },
        "كيفية استخدام المعالجة اللاحقة (post-processing)": {
          "url": "manual/ar/introduction/How-to-use-post-processing",
          "methods": [],
          "props": []
        },
        "تحولات المصفوفة (Matrix transformations)": {
          "url": "manual/ar/introduction/Matrix-transformations",
          "methods": [],
          "props": []
        },
        "نظام الحركات": {
          "url": "manual/ar/introduction/Animation-system",
          "methods": [],
          "props": []
        }
      },
      "أدوات البناء": {
        "الاختبار مع NPM": {
          "url": "manual/ar/buildTools/Testing-with-NPM",
          "methods": [],
          "props": []
        }
      }
    },
    "المرجع": {
      "الحركات": {
        "AnimationAction": {
          "url": "api/ar/animation/AnimationAction",
          "methods": [
            "crossFadeFrom",
            "crossFadeTo",
            "fadeIn",
            "fadeOut",
            "getEffectiveTimeScale",
            "getEffectiveWeight",
            "getClip",
            "getMixer",
            "getRoot",
            "halt",
            "isRunning",
            "isScheduled",
            "play",
            "reset",
            "setDuration",
            "setEffectiveTimeScale",
            "setEffectiveWeight",
            "setLoop",
            "startAt",
            "stop",
            "stopFading",
            "stopWarping",
            "syncWith",
            "warp"
          ],
          "props": [
            "clampWhenFinished",
            "enabled",
            "loop",
            "paused",
            "repetitions",
            "time",
            "timeScale",
            "weight",
            "zeroSlopeAtEnd",
            "zeroSlopeAtStart"
          ]
        },
        "AnimationClip": {
          "url": "api/ar/animation/AnimationClip",
          "methods": [
            "clone",
            "optimize",
            "resetDuration",
            "toJSON",
            "trim",
            "validate",
            "CreateClipsFromMorphTargetSequences",
            "CreateFromMorphTargetSequence",
            "findByName",
            "parse",
            "parseAnimation",
            "toJSON"
          ],
          "props": ["duration", "name", "tracks", "uuid"]
        },
        "AnimationMixer": {
          "url": "api/ar/animation/AnimationMixer",
          "methods": [
            "clipAction",
            "existingAction",
            "getRoot",
            "stopAllAction",
            "update",
            "setTime",
            "uncacheClip",
            "uncacheRoot",
            "uncacheAction"
          ],
          "props": ["time", "timeScale"]
        },
        "AnimationObjectGroup": {
          "url": "api/ar/animation/AnimationObjectGroup",
          "methods": ["add", "remove", "uncache"],
          "props": ["stats", "uuid"]
        },
        "AnimationUtils": {
          "url": "api/ar/animation/AnimationUtils",
          "methods": [
            "arraySlice",
            "convertArray",
            "flattenJSON",
            "getKeyframeOrder",
            "isTypedArray",
            "sortedArray",
            "subclip"
          ],
          "props": []
        },
        "KeyframeTrack": {
          "url": "api/ar/animation/KeyframeTrack",
          "methods": [
            "clone",
            "createInterpolant",
            "getInterpolation",
            "getValueSize",
            "InterpolantFactoryMethodDiscrete",
            "InterpolantFactoryMethodLinear",
            "InterpolantFactoryMethodSmooth",
            "optimize",
            "scale",
            "setInterpolation",
            "shift",
            "trim",
            "validate",
            "toJSON"
          ],
          "props": [
            "name",
            "times",
            "values",
            "DefaultInterpolation",
            "TimeBufferType ",
            "ValueBufferType "
          ]
        },
        "PropertyBinding": {
          "url": "api/ar/animation/PropertyBinding",
          "methods": [
            "getValue",
            "setValue",
            "bind",
            "unbind",
            "Composite",
            "create",
            "parseTrackName",
            "findNode"
          ],
          "props": [
            "path",
            "parsedPath",
            "node",
            "rootNode",
            "BindingType",
            "Versioning",
            "GetterByBindingType",
            "SetterByBindingTypeAndVersioning"
          ]
        },
        "PropertyMixer": {
          "url": "api/ar/animation/PropertyMixer",
          "methods": [
            "accumulate",
            "apply",
            "saveOriginalState",
            "restoreOriginalState"
          ],
          "props": [
            "binding",
            "buffer",
            "cumulativeWeight",
            "valueSize",
            "referenceCount",
            "useCount"
          ]
        }
      },
      "الحركات / Tracks": {
        "BooleanKeyframeTrack": {
          "url": "api/ar/animation/tracks/BooleanKeyframeTrack",
          "methods": [
            "InterpolantFactoryMethodLinear ",
            "InterpolantFactoryMethodSmooth "
          ],
          "props": ["DefaultInterpolation", "ValueBufferType", "ValueTypeName"]
        },
        "ColorKeyframeTrack": {
          "url": "api/ar/animation/tracks/ColorKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        },
        "NumberKeyframeTrack": {
          "url": "api/ar/animation/tracks/NumberKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        },
        "QuaternionKeyframeTrack": {
          "url": "api/ar/animation/tracks/QuaternionKeyframeTrack",
          "methods": ["InterpolantFactoryMethodLinear"],
          "props": ["DefaultInterpolation", "ValueTypeName"]
        },
        "StringKeyframeTrack": {
          "url": "api/ar/animation/tracks/StringKeyframeTrack",
          "methods": [
            "InterpolantFactoryMethodLinear",
            "InterpolantFactoryMethodSmooth"
          ],
          "props": ["DefaultInterpolation", "ValueBufferType", "ValueTypeName"]
        },
        "VectorKeyframeTrack": {
          "url": "api/ar/animation/tracks/VectorKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        }
      },
      "Audio": {
        "Audio": {
          "url": "api/ar/audio/Audio",
          "methods": [
            "connect",
            "disconnect",
            "getFilter",
            "getFilters",
            "getLoop",
            "getOutput",
            "getPlaybackRate",
            "getVolume",
            "play",
            "pause",
            "onEnded",
            "setBuffer",
            "setFilter",
            "setFilters",
            "setLoop",
            "setLoopStart",
            "setLoopEnd",
            "setMediaElementSource",
            "setMediaStreamSource",
            "setNodeSource",
            "setPlaybackRate",
            "setVolume",
            "stop"
          ],
          "props": [
            "autoplay",
            "context",
            "detune",
            "filters",
            "gain",
            "hasPlaybackControl",
            "isPlaying",
            "listener",
            "playbackRate",
            "offset",
            "duration",
            "source",
            "sourceType",
            "type"
          ]
        },
        "AudioAnalyser": {
          "url": "api/ar/audio/AudioAnalyser",
          "methods": ["getFrequencyData", "getAverageFrequency"],
          "props": ["analyser", "fftSize", "data"]
        },
        "AudioContext": {
          "url": "api/ar/audio/AudioContext",
          "methods": ["getContext", "setContext"],
          "props": []
        },
        "AudioListener": {
          "url": "api/ar/audio/AudioListener",
          "methods": [
            "getInput",
            "removeFilter",
            "getFilter",
            "setFilter",
            "getMasterVolume",
            "setMasterVolume"
          ],
          "props": ["context", "gain", "filter", "timeDelta"]
        },
        "PositionalAudio": {
          "url": "api/ar/audio/PositionalAudio",
          "methods": [
            "getOutput",
            "getRefDistance",
            "setRefDistance",
            "getRolloffFactor",
            "setRolloffFactor",
            "getDistanceModel",
            "setDistanceModel",
            "getMaxDistance",
            "setMaxDistance",
            "setDirectionalCone"
          ],
          "props": ["panner"]
        }
      },
      "Cameras": {
        "ArrayCamera": {
          "url": "api/ar/cameras/ArrayCamera",
          "methods": [],
          "props": ["cameras"]
        },
        "Camera": {
          "url": "api/ar/cameras/Camera",
          "methods": ["clone", "copy", "getWorldDirection"],
          "props": [
            "layers",
            "matrixWorldInverse",
            "projectionMatrix",
            "projectionMatrixInverse"
          ]
        },
        "CubeCamera": {
          "url": "api/ar/cameras/CubeCamera",
          "methods": ["update", "clear"],
          "props": ["renderTarget"]
        }
      }
    }
  },
  "zh": {
    "手册": {
      "起步": {
        "创建一个场景": {
          "url": "manual/zh/introduction/Creating-a-scene",
          "methods": [],
          "props": []
        },
        "安装": {
          "url": "manual/zh/introduction/Installation",
          "methods": [],
          "props": []
        },
        "浏览器支持": {
          "url": "manual/zh/introduction/Browser-support",
          "methods": [],
          "props": []
        },
        "WebGL兼容性检查": {
          "url": "manual/zh/introduction/WebGL-compatibility-check",
          "methods": [],
          "props": []
        },
        "如何在本地运行Three.js": {
          "url": "manual/zh/introduction/How-to-run-things-locally",
          "methods": [],
          "props": []
        },
        "画线": {
          "url": "manual/zh/introduction/Drawing-lines",
          "methods": [],
          "props": []
        },
        "创建文字":{
          "url": "manual/zh/introduction/Creating-text",
          "methods": [],
          "props": []
        },
        "载入3D模型": {
          "url": "manual/zh/introduction/Loading-3D-models",
          "methods": [],
          "props": []
        },
        "常见问题": {
          "url": "manual/zh/introduction/FAQ",
          "methods": [],
          "props": []
        },
        "一些有用的链接": {
          "url": "manual/zh/introduction/Useful-links",
          "methods": [],
          "props": []
        }
      },
      "进阶": {
        "如何更新场景": {
          "url": "manual/zh/introduction/How-to-update-things",
          "methods": [],
          "props": []
        },
        "如何废置对象": {
          "url": "manual/zh/introduction/How-to-dispose-of-objects",
          "methods": [],
          "props": []
        },
        "如何创建VR内容": {
          "url": "manual/zh/introduction/How-to-create-VR-content",
          "methods": [],
          "props": []
        },
        "如何使用后期处理": {
          "url": "manual/zh/introduction/How-to-use-post-processing",
          "methods": [],
          "props": []
        },
        "矩阵变换": {
          "url": "manual/zh/introduction/Matrix-transformations",
          "methods": [],
          "props": []
        },
        "动画系统": {
          "url": "manual/zh/introduction/Animation-system",
          "methods": [],
          "props": []
        }
      },
      "构建工具": {
        "使用NPM进行测试": {
          "url": "manual/zh/buildTools/Testing-with-NPM",
          "methods": [],
          "props": []
        }
      }
    },
    "参考": {
      "动画": {
        "AnimationAction": {
          "url": "api/zh/animation/AnimationAction",
          "methods": [
            "crossFadeFrom",
            "crossFadeTo",
            "fadeIn",
            "fadeOut",
            "getEffectiveTimeScale",
            "getEffectiveWeight",
            "getClip",
            "getMixer",
            "getRoot",
            "halt",
            "isRunning",
            "isScheduled",
            "play",
            "reset",
            "setDuration",
            "setEffectiveTimeScale",
            "setEffectiveWeight",
            "setLoop",
            "startAt",
            "stop",
            "stopFading",
            "stopWarping",
            "syncWith",
            "warp"
          ],
          "props": [
            "clampWhenFinished",
            "enabled",
            "loop",
            "paused",
            "repetitions",
            "time",
            "timeScale",
            "weight",
            "zeroSlopeAtEnd",
            "zeroSlopeAtStart"
          ]
        },
        "AnimationClip": {
          "url": "api/zh/animation/AnimationClip",
          "methods": [
            "clone",
            "optimize",
            "resetDuration",
            "toJSON",
            "trim",
            "validate",
            "CreateClipsFromMorphTargetSequences",
            "CreateFromMorphTargetSequence",
            "findByName",
            "parse",
            "parseAnimation",
            "toJSON"
          ],
          "props": ["duration", "name", "tracks", "uuid"]
        },
        "AnimationMixer": {
          "url": "api/zh/animation/AnimationMixer",
          "methods": [
            "setTime",
            "clipAction",
            "existingAction",
            "getRoot",
            "stopAllAction",
            "update",
            "uncacheClip",
            "uncacheRoot",
            "uncacheAction"
          ],
          "props": ["time", "timeScale"]
        },
        "AnimationObjectGroup": {
          "url": "api/zh/animation/AnimationObjectGroup",
          "methods": ["add", "remove", "uncache"],
          "props": ["stats", "uuid"]
        },
        "AnimationUtils": {
          "url": "api/zh/animation/AnimationUtils",
          "methods": [
            "arraySlice",
            "convertArray",
            "flattenJSON",
            "getKeyframeOrder",
            "insertKeyframe",
            "isTypedArray",
            "mergeMorphTargetTracks",
            "sortedArray",
            "subclip"
          ],
          "props": []
        },
        "KeyframeTrack": {
          "url": "api/zh/animation/KeyframeTrack",
          "methods": [
            "clone",
            "createInterpolant",
            "getInterpolation",
            "getValueSize",
            "InterpolantFactoryMethodDiscrete",
            "InterpolantFactoryMethodLinear",
            "InterpolantFactoryMethodSmooth",
            "optimize",
            "scale",
            "setInterpolation",
            "shift",
            "trim",
            "validate",
            "toJSON"
          ],
          "props": [
            "name",
            "times",
            "values",
            "DefaultInterpolation",
            "TimeBufferType ",
            "ValueBufferType "
          ]
        },
        "PropertyBinding": {
          "url": "api/zh/animation/PropertyBinding",
          "methods": [
            "getValue",
            "setValue",
            "bind",
            "unbind",
            "Composite",
            "create",
            "parseTrackName",
            "findNode"
          ],
          "props": [
            "path",
            "parsedPath",
            "node",
            "rootNode",
            "BindingType",
            "Versioning",
            "GetterByBindingType",
            "SetterByBindingTypeAndVersioning"
          ]
        },
        "PropertyMixer": {
          "url": "api/zh/animation/PropertyMixer",
          "methods": [
            "accumulate",
            "apply",
            "saveOriginalState",
            "restoreOriginalState"
          ],
          "props": [
            "binding",
            "buffer",
            "cumulativeWeight",
            "valueSize",
            "referenceCount",
            "useCount"
          ]
        }
      },
      "动画 / 轨道": {
        "BooleanKeyframeTrack": {
          "url": "api/zh/animation/tracks/BooleanKeyframeTrack",
          "methods": [
            "InterpolantFactoryMethodLinear ",
            "InterpolantFactoryMethodSmooth "
          ],
          "props": ["DefaultInterpolation", "ValueBufferType", "ValueTypeName"]
        },
        "ColorKeyframeTrack": {
          "url": "api/zh/animation/tracks/ColorKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        },
        "NumberKeyframeTrack": {
          "url": "api/zh/animation/tracks/NumberKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        },
        "QuaternionKeyframeTrack": {
          "url": "api/zh/animation/tracks/QuaternionKeyframeTrack",
          "methods": ["InterpolantFactoryMethodLinear"],
          "props": ["DefaultInterpolation", "ValueTypeName"]
        },
        "StringKeyframeTrack": {
          "url": "api/zh/animation/tracks/StringKeyframeTrack",
          "methods": [
            "InterpolantFactoryMethodLinear",
            "InterpolantFactoryMethodSmooth"
          ],
          "props": ["DefaultInterpolation", "ValueBufferType", "ValueTypeName"]
        },
        "VectorKeyframeTrack": {
          "url": "api/zh/animation/tracks/VectorKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        }
      },
      "音频": {
        "Audio": {
          "url": "api/zh/audio/Audio",
          "methods": [
            "connect",
            "disconnect",
            "getFilter",
            "getFilters",
            "getLoop",
            "getOutput",
            "getPlaybackRate",
            "getVolume",
            "play",
            "pause",
            "onEnded",
            "setBuffer",
            "setFilter",
            "setFilters",
            "setLoop",
            "setLoopStart",
            "setLoopEnd",
            "setMediaElementSource",
            "setMediaStreamSource",
            "setNodeSource",
            "setPlaybackRate",
            "setVolume",
            "stop"
          ],
          "props": [
            "autoplay",
            "context",
            "detune",
            "filters",
            "gain",
            "hasPlaybackControl",
            "isPlaying",
            "listener",
            "playbackRate",
            "offset",
            "duration",
            "source",
            "sourceType",
            "type"
          ]
        },
        "AudioAnalyser": {
          "url": "api/zh/audio/AudioAnalyser",
          "methods": ["getFrequencyData", "getAverageFrequency"],
          "props": ["analyser", "fftSize", "data"]
        },
        "AudioContext": {
          "url": "api/zh/audio/AudioContext",
          "methods": ["getContext", "setContext"],
          "props": []
        },
        "AudioListener": {
          "url": "api/zh/audio/AudioListener",
          "methods": [
            "getInput",
            "removeFilter",
            "getFilter",
            "setFilter",
            "getMasterVolume",
            "setMasterVolume"
          ],
          "props": ["context", "gain", "filter", "timeDelta"]
        },
        "PositionalAudio": {
          "url": "api/zh/audio/PositionalAudio",
          "methods": [
            "getOutput",
            "getRefDistance",
            "setRefDistance",
            "getRolloffFactor",
            "setRolloffFactor",
            "getDistanceModel",
            "setDistanceModel",
            "getMaxDistance",
            "setMaxDistance",
            "setDirectionalCone"
          ],
          "props": ["panner"]
        }
      },
      "摄像机": {
        "ArrayCamera": {
          "url": "api/zh/cameras/ArrayCamera",
          "methods": [],
          "props": ["cameras"]
        },
        "Camera": {
          "url": "api/zh/cameras/Camera",
          "methods": ["clone", "copy", "getWorldDirection"],
          "props": [
            "layers",
            "matrixWorldInverse",
            "projectionMatrix",
            "projectionMatrixInverse"
          ]
        },
        "CubeCamera": {
          "url": "api/zh/cameras/CubeCamera",
          "methods": ["update"],
          "props": ["renderTarget"]
        },
        "OrthographicCamera": {
          "url": "api/zh/cameras/OrthographicCamera",
          "methods": [
            "setViewOffset",
            "clearViewOffset",
            "updateProjectionMatrix",
            "toJSON"
          ],
          "props": [
            "bottom",
            "far",
            "left",
            "near",
            "right",
            "top",
            "view",
            "zoom"
          ]
        },
        "PerspectiveCamera": {
          "url": "api/zh/cameras/PerspectiveCamera",
          "methods": [
            "clearViewOffset",
            "getEffectiveFOV",
            "getFilmHeight",
            "getFilmWidth",
            "getFocalLength",
            "setFocalLength",
            "setViewOffset",
            "updateProjectionMatrix",
            "toJSON"
          ],
          "props": [
            "aspect",
            "far",
            "filmGauge",
            "filmOffset",
            "focus",
            "fov",
            "near",
            "view",
            "zoom"
          ]
        },
        "StereoCamera": {
          "url": "api/zh/cameras/StereoCamera",
          "methods": ["update"],
          "props": ["aspect", "eyeSep", "cameraL", "cameraR"]
        }
      },
      "常量": {
        "Animation": {
          "url": "api/zh/constants/Animation",
          "methods": [],
          "props": []
        },
        "Core": { "url": "api/zh/constants/Core", "methods": [], "props": [] },
        "CustomBlendingEquation": {
          "url": "api/zh/constants/CustomBlendingEquations",
          "methods": [],
          "props": []
        },
        "Materials": {
          "url": "api/zh/constants/Materials",
          "methods": [],
          "props": []
        },
        "Renderer": {
          "url": "api/zh/constants/Renderer",
          "methods": [],
          "props": []
        },
        "Textures": {
          "url": "api/zh/constants/Textures",
          "methods": [],
          "props": []
        }
      },
      "核心": {
        "BufferAttribute": {
          "url": "api/zh/core/BufferAttribute",
          "methods": [
            "applyMatrix3",
            "applyMatrix4",
            "applyNormalMatrix",
            "transformDirection",
            "clone",
            "copyArray",
            "copyAt",
            "copyColorsArray",
            "copyVector2sArray",
            "copyVector3sArray",
            "copyVector4sArray",
            "getX",
            "getY",
            "getZ",
            "getW",
            "onUpload",
            "set",
            "setUsage",
            "setX",
            "setY",
            "setZ",
            "setW",
            "setXY",
            "setXYZ",
            "setXYZW"
          ],
          "props": [
            "array",
            "count",
            "itemSize",
            "name",
            "needsUpdate",
            "normalized",
            "onUploadCallback",
            "updateRange",
            "usage",
            "version"
          ]
        },
        "BufferGeometry": {
          "url": "api/zh/core/BufferGeometry",
          "methods": [
            "setAttribute",
            "addGroup",
            "applyMatrix4",
            "center",
            "clone",
            "copy",
            "clearGroups",
            "computeBoundingBox",
            "computeBoundingSphere",
            "computeTangents",
            "computeVertexNormals",
            "dispose",
            "getAttribute",
            "getIndex",
            "hasAttribute",
            "lookAt",
            "merge",
            "normalizeNormals",
            "deleteAttribute",
            "rotateX",
            "rotateY",
            "rotateZ",
            "scale",
            "setIndex",
            "setDrawRange",
            "setFromPoints",
            "toJSON",
            "toNonIndexed",
            "translate"
          ],
          "props": [
            "attributes",
            "boundingBox",
            "boundingSphere",
            "drawRange",
            "groups",
            "drawcalls",
            "id",
            "index",
            "morphAttributes",
            "morphTargetsRelative",
            "name",
            "userData",
            "uuid"
          ]
        },
        "Clock": {
          "url": "api/zh/core/Clock",
          "methods": ["start", "stop", "getElapsedTime", "getDelta"],
          "props": [
            "autoStart",
            "startTime",
            "oldTime",
            "elapsedTime",
            "running"
          ]
        },
        "EventDispatcher": {
          "url": "api/zh/core/EventDispatcher",
          "methods": [
            "addEventListener",
            "hasEventListener",
            "removeEventListener",
            "dispatchEvent"
          ],
          "props": []
        },
        "GLBufferAttribute": {
          "url": "api/zh/core/GLBufferAttribute",
          "methods": ["setBuffer", "setType", "setItemSize", "setCount"],
          "props": [
            "buffer",
            "count",
            "itemSize",
            "elementSize",
            "type",
            "isGLBufferAttribute",
            "version",
            "needsUpdate"
          ]
        },
        "InstancedBufferAttribute": {
          "url": "api/zh/core/InstancedBufferAttribute",
          "methods": [],
          "props": ["meshPerAttribute"]
        },
        "InstancedBufferGeometry": {
          "url": "api/zh/core/InstancedBufferGeometry",
          "methods": [],
          "props": ["instanceCount"]
        },
        "InstancedInterleavedBuffer": {
          "url": "api/zh/core/InstancedInterleavedBuffer",
          "methods": [],
          "props": ["meshPerAttribute"]
        },
        "InterleavedBuffer": {
          "url": "api/zh/core/InterleavedBuffer",
          "methods": ["copy", "copyAt", "set", "clone", "setUsage", "toJSON"],
          "props": [
            "array",
            "stride",
            "count",
            "updateRange",
            "uuid",
            "version",
            "needsUpdate",
            "usage"
          ]
        },
        "InterleavedBufferAttribute": {
          "url": "api/zh/core/InterleavedBufferAttribute",
          "methods": [
            "applyMatrix4",
            "applyNormalMatrix",
            "transformDirection",
            "getX",
            "getY",
            "getZ",
            "getW",
            "setX",
            "setY",
            "setZ",
            "setW",
            "setXY",
            "setXYZ",
            "setXYZW"
          ],
          "props": [
            "data",
            "array",
            "count",
            "itemSize",
            "name",
            "needsUpdate",
            "normalized",
            "offset"
          ]
        },
        "Layers": {
          "url": "api/zh/core/Layers",
          "methods": [
            "disable",
            "enable",
            "set",
            "test",
            "toggle",
            "enableAll",
            "disableAll"
          ],
          "props": ["mask"]
        },
        "Object3D": {
          "url": "api/zh/core/Object3D",
          "methods": [
            "add",
            "applyMatrix4",
            "applyQuaternion",
            "attach",
            "clone",
            "copy",
            "getObjectById",
            "getObjectByName",
            "getObjectByProperty",
            "getWorldPosition",
            "getWorldQuaternion",
            "getWorldScale",
            "getWorldDirection",
            "localToWorld",
            "lookAt",
            "lookAt",
            "raycast",
            "remove",
            "rotateOnAxis",
            "rotateOnWorldAxis",
            "rotateX",
            "rotateY",
            "rotateZ",
            "setRotationFromAxisAngle",
            "setRotationFromEuler",
            "setRotationFromMatrix",
            "setRotationFromQuaternion",
            "toJSON",
            "translateOnAxis",
            "translateX",
            "translateY",
            "translateZ",
            "traverse",
            "traverseVisible",
            "traverseAncestors",
            "updateMatrix",
            "updateMatrixWorld",
            "updateWorldMatrix",
            "worldToLocal"
          ],
          "props": [
            "animations",
            "castShadow",
            "children",
            "customDepthMaterial",
            "customDistanceMaterial",
            "frustumCulled",
            "id",
            "layers",
            "matrix",
            "matrixAutoUpdate",
            "matrixWorld",
            "matrixWorldNeedsUpdate",
            "modelViewMatrix",
            "name",
            "normalMatrix",
            "onAfterRender",
            "onBeforeRender",
            "parent",
            "position",
            "quaternion",
            "receiveShadow",
            "renderOrder",
            "rotation",
            "scale",
            "up",
            "userData",
            "uuid",
            "visible",
            "DefaultUp",
            "DefaultMatrixAutoUpdate"
          ]
        },
        "Raycaster": {
          "url": "api/zh/core/Raycaster",
          "methods": [
            "set",
            "setFromCamera",
            "intersectObject",
            "intersectObjects"
          ],
          "props": ["far", "near", "camera", "layers", "params", "ray"]
        },
        "Uniform": {
          "url": "api/zh/core/Uniform",
          "methods": ["clone"],
          "props": ["value"]
        }
      },
      "核心 / BufferAttributes": {
        "BufferAttribute Types": {
          "url": "api/zh/core/bufferAttributeTypes/BufferAttributeTypes",
          "methods": [],
          "props": []
        }
      },
      "附件": {
        "Earcut": {
          "url": "api/zh/extras/Earcut",
          "methods": ["triangulate"],
          "props": []
        },
        "ImageUtils": {
          "url": "api/zh/extras/ImageUtils",
          "methods": ["getDataURL"],
          "props": []
        },
        "PMREMGenerator": {
          "url": "api/zh/extras/PMREMGenerator",
          "methods": [
            "fromScene",
            "fromEquirectangular",
            "fromCubemap",
            "compileCubemapShader",
            "compileEquirectangularShader",
            "dispose"
          ],
          "props": []
        },
        "ShapeUtils": {
          "url": "api/zh/extras/ShapeUtils",
          "methods": ["area", "isClockWise", "triangulateShape"],
          "props": []
        }
      },
      "附件 / 核心": {
        "Curve": {
          "url": "api/zh/extras/core/Curve",
          "methods": [
            "getPoint",
            "getPointAt",
            "getPoints",
            "getSpacedPoints",
            "getLength",
            "getLengths",
            "updateArcLengths",
            "getUtoTmapping",
            "getTangent",
            "getTangentAt",
            "computeFrenetFrames",
            "clone",
            "copy",
            "toJSON",
            "fromJSON"
          ],
          "props": ["arcLengthDivisions"]
        },
        "CurvePath": {
          "url": "api/zh/extras/core/CurvePath",
          "methods": [
            "add",
            "closePath",
            "getCurveLengths",
            "getPoint",
            "getPoints",
            "getSpacedPoints"
          ],
          "props": ["curves", "autoClose"]
        },
        "Font": {
          "url": "api/zh/extras/core/Font",
          "methods": ["generateShapes"],
          "props": ["data"]
        },
        "Interpolations": {
          "url": "api/zh/extras/core/Interpolations",
          "methods": ["CatmullRom", "QuadraticBezier", "CubicBezier"],
          "props": []
        },
        "Path": {
          "url": "api/zh/extras/core/Path",
          "methods": [
            "absarc",
            "absellipse",
            "arc",
            "bezierCurveTo",
            "ellipse",
            "lineTo",
            "moveTo",
            "quadraticCurveTo",
            "setFromPoints",
            "splineThru"
          ],
          "props": ["currentPoint"]
        },
        "Shape": {
          "url": "api/zh/extras/core/Shape",
          "methods": ["extractPoints", "getPointsHoles"],
          "props": ["uuid", "holes"]
        },
        "ShapePath": {
          "url": "api/zh/extras/core/ShapePath",
          "methods": [
            "moveTo",
            "lineTo",
            "quadraticCurveTo",
            "bezierCurveTo",
            "splineThru",
            "toShapes"
          ],
          "props": ["subPaths", "currentPath"]
        }
      },
      "附件 / 曲线": {
        "ArcCurve": {
          "url": "api/zh/extras/curves/ArcCurve",
          "methods": [],
          "props": []
        },
        "CatmullRomCurve3": {
          "url": "api/zh/extras/curves/CatmullRomCurve3",
          "methods": [],
          "props": ["points", "closed", "curveType", "tension"]
        },
        "CubicBezierCurve": {
          "url": "api/zh/extras/curves/CubicBezierCurve",
          "methods": [],
          "props": ["v0", "v1", "v2", "v3"]
        },
        "CubicBezierCurve3": {
          "url": "api/zh/extras/curves/CubicBezierCurve3",
          "methods": [],
          "props": ["v0", "v1", "v2", "v3"]
        },
        "EllipseCurve": {
          "url": "api/zh/extras/curves/EllipseCurve",
          "methods": [],
          "props": [
            "aX",
            "aY",
            "xRadius",
            "yRadius",
            "aStartAngle",
            "aEndAngle",
            "aClockwise",
            "aRotation"
          ]
        },
        "LineCurve": {
          "url": "api/zh/extras/curves/LineCurve",
          "methods": [],
          "props": ["v1", "v2"]
        },
        "LineCurve3": {
          "url": "api/zh/extras/curves/LineCurve3",
          "methods": [],
          "props": ["v1", "v2"]
        },
        "QuadraticBezierCurve": {
          "url": "api/zh/extras/curves/QuadraticBezierCurve",
          "methods": [],
          "props": ["v0", "v1", "v2"]
        },
        "QuadraticBezierCurve3": {
          "url": "api/zh/extras/curves/QuadraticBezierCurve3",
          "methods": [],
          "props": ["v0", "v1", "v2"]
        },
        "SplineCurve": {
          "url": "api/zh/extras/curves/SplineCurve",
          "methods": [],
          "props": ["points"]
        }
      },
      "附件 / 物体": {
        "ImmediateRenderObject": {
          "url": "api/zh/extras/objects/ImmediateRenderObject",
          "methods": ["render"],
          "props": [
            "material",
            "hasPositions",
            "hasNormals",
            "hasColors",
            "hasUvs",
            "positionArray",
            "normalArray",
            "colorArray",
            "uvArray",
            "count"
          ]
        }
      },
      "几何体": {
        "BoxGeometry": {
          "url": "api/zh/geometries/BoxGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "CircleGeometry": {
          "url": "api/zh/geometries/CircleGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "ConeGeometry": {
          "url": "api/zh/geometries/ConeGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "CylinderGeometry": {
          "url": "api/zh/geometries/CylinderGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "DodecahedronGeometry": {
          "url": "api/zh/geometries/DodecahedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "EdgesGeometry": {
          "url": "api/zh/geometries/EdgesGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "ExtrudeGeometry": {
          "url": "api/zh/geometries/ExtrudeGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "IcosahedronGeometry": {
          "url": "api/zh/geometries/IcosahedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "LatheGeometry": {
          "url": "api/zh/geometries/LatheGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "OctahedronGeometry": {
          "url": "api/zh/geometries/OctahedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "ParametricGeometry": {
          "url": "api/zh/geometries/ParametricGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "PlaneGeometry": {
          "url": "api/zh/geometries/PlaneGeometry",
          "methods": [],
          "props": []
        },
        "PolyhedronGeometry": {
          "url": "api/zh/geometries/PolyhedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "RingGeometry": {
          "url": "api/zh/geometries/RingGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "ShapeGeometry": {
          "url": "api/zh/geometries/ShapeGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "SphereGeometry": {
          "url": "api/zh/geometries/SphereGeometry",
          "methods": [],
          "props": []
        },
        "TetrahedronGeometry": {
          "url": "api/zh/geometries/TetrahedronGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "TextGeometry": {
          "url": "api/zh/geometries/TextGeometry",
          "methods": [],
          "props": ["parameters"]
        },
        "TorusGeometry": {
          "url": "api/zh/geometries/TorusGeometry",
          "methods": [],
          "props": []
        },
        "TorusKnotGeometry": {
          "url": "api/zh/geometries/TorusKnotGeometry",
          "methods": [],
          "props": []
        },
        "TubeGeometry": {
          "url": "api/zh/geometries/TubeGeometry",
          "methods": [],
          "props": ["parameters", "tangents", "normals", "binormals"]
        },
        "WireframeGeometry": {
          "url": "api/zh/geometries/WireframeGeometry",
          "methods": [],
          "props": []
        }
      },
      "辅助对象": {
        "ArrowHelper": {
          "url": "api/zh/helpers/ArrowHelper",
          "methods": ["setColor", "setLength", "setDirection"],
          "props": ["line", "cone"]
        },
        "AxesHelper": {
          "url": "api/zh/helpers/AxesHelper",
          "methods": [],
          "props": []
        },
        "BoxHelper": {
          "url": "api/zh/helpers/BoxHelper",
          "methods": ["update", "setFromObject"],
          "props": []
        },
        "Box3Helper": {
          "url": "api/zh/helpers/Box3Helper",
          "methods": ["updateMatrixWorld"],
          "props": ["box"]
        },
        "CameraHelper": {
          "url": "api/zh/helpers/CameraHelper",
          "methods": ["update"],
          "props": ["camera", "pointMap", "matrix", "matrixAutoUpdate"]
        },
        "DirectionalLightHelper": {
          "url": "api/zh/helpers/DirectionalLightHelper",
          "methods": ["dispose", "update"],
          "props": [
            "lightPlane",
            "light",
            "matrix",
            "matrixAutoUpdate",
            "color"
          ]
        },
        "GridHelper": {
          "url": "api/zh/helpers/GridHelper",
          "methods": [],
          "props": []
        },
        "PolarGridHelper": {
          "url": "api/zh/helpers/PolarGridHelper",
          "methods": [],
          "props": []
        },
        "HemisphereLightHelper": {
          "url": "api/zh/helpers/HemisphereLightHelper",
          "methods": ["dispose", "update"],
          "props": ["light", "matrix", "matrixAutoUpdate", "color"]
        },
        "PlaneHelper": {
          "url": "api/zh/helpers/PlaneHelper",
          "methods": ["updateMatrixWorld"],
          "props": ["plane", "size"]
        },
        "PointLightHelper": {
          "url": "api/zh/helpers/PointLightHelper",
          "methods": ["dispose", "update"],
          "props": ["light", "matrix", "matrixAutoUpdate", "color"]
        },
        "SkeletonHelper": {
          "url": "api/zh/helpers/SkeletonHelper",
          "methods": [],
          "props": ["bones", "root"]
        },
        "SpotLightHelper": {
          "url": "api/zh/helpers/SpotLightHelper",
          "methods": ["dispose", "update"],
          "props": ["cone", "light", "matrix", "matrixAutoUpdate", "color"]
        }
      },
      "灯光": {
        "AmbientLight": {
          "url": "api/zh/lights/AmbientLight",
          "methods": [],
          "props": ["castShadow"]
        },
        "AmbientLightProbe": {
          "url": "api/zh/lights/AmbientLightProbe",
          "methods": [],
          "props": []
        },
        "DirectionalLight": {
          "url": "api/zh/lights/DirectionalLight",
          "methods": ["copy"],
          "props": ["castShadow", "position", "shadow", "target"]
        },
        "HemisphereLight": {
          "url": "api/zh/lights/HemisphereLight",
          "methods": ["copy"],
          "props": ["castShadow", "color", "groundColor", "position"]
        },
        "HemisphereLightProbe": {
          "url": "api/zh/lights/HemisphereLightProbe",
          "methods": [],
          "props": []
        },
        "Light": {
          "url": "api/zh/lights/Light",
          "methods": ["copy", "toJSON"],
          "props": ["color", "intensity"]
        },
        "LightProbe": {
          "url": "api/zh/lights/LightProbe",
          "methods": [],
          "props": ["sh"]
        },
        "PointLight": {
          "url": "api/zh/lights/PointLight",
          "methods": ["copy"],
          "props": ["decay", "distance", "power", "shadow"]
        },
        "RectAreaLight": {
          "url": "api/zh/lights/RectAreaLight",
          "methods": ["copy"],
          "props": []
        },
        "SpotLight": {
          "url": "api/zh/lights/SpotLight",
          "methods": ["copy"],
          "props": [
            "angle",
            "castShadow",
            "decay",
            "distance",
            "penumbra",
            "position",
            "power",
            "shadow",
            "target"
          ]
        }
      },
      "灯光 / 阴影": {
        "LightShadow": {
          "url": "api/zh/lights/shadows/LightShadow",
          "methods": [
            "getFrameExtents",
            "updateMatrices",
            "getFrustum",
            "getViewportCount",
            "copy",
            "clone",
            "toJSON"
          ],
          "props": [
            "autoUpdate",
            "camera",
            "bias",
            "map",
            "mapPass",
            "mapSize",
            "matrix",
            "needsUpdate",
            "normalBias",
            "radius"
          ]
        },
        "PointLightShadow": {
          "url": "api/zh/lights/shadows/PointLightShadow",
          "methods": ["updateMatrices"],
          "props": []
        },
        "DirectionalLightShadow": {
          "url": "api/zh/lights/shadows/DirectionalLightShadow",
          "methods": [],
          "props": ["camera"]
        },
        "SpotLightShadow": {
          "url": "api/zh/lights/shadows/SpotLightShadow",
          "methods": [],
          "props": ["camera", "focus"]
        }
      },
      "加载器": {
        "AnimationLoader": {
          "url": "api/zh/loaders/AnimationLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "AudioLoader": {
          "url": "api/zh/loaders/AudioLoader",
          "methods": ["load"],
          "props": []
        },
        "BufferGeometryLoader": {
          "url": "api/zh/loaders/BufferGeometryLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "Cache": {
          "url": "api/zh/loaders/Cache",
          "methods": ["add", "get", "remove", "clear"],
          "props": ["enabled", "files"]
        },
        "CompressedTextureLoader": {
          "url": "api/zh/loaders/CompressedTextureLoader",
          "methods": ["load"],
          "props": []
        },
        "CubeTextureLoader": {
          "url": "api/zh/loaders/CubeTextureLoader",
          "methods": ["load"],
          "props": []
        },
        "DataTextureLoader": {
          "url": "api/zh/loaders/DataTextureLoader",
          "methods": ["load"],
          "props": []
        },
        "FileLoader": {
          "url": "api/zh/loaders/FileLoader",
          "methods": [
            "load",
            "setMimeType",
            "setRequestHeader",
            "setResponseType",
            "setWithCredentials"
          ],
          "props": ["mimeType", "responseType", "withCredentials"]
        },
        "FontLoader": {
          "url": "api/zh/loaders/FontLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "ImageBitmapLoader": {
          "url": "api/zh/loaders/ImageBitmapLoader",
          "methods": ["load", "setOptions"],
          "props": ["options"]
        },
        "ImageLoader": {
          "url": "api/zh/loaders/ImageLoader",
          "methods": ["load"],
          "props": []
        },
        "Loader": {
          "url": "api/zh/loaders/Loader",
          "methods": [
            "load",
            "loadAsync",
            "parse",
            "setCrossOrigin",
            "setPath",
            "setResourcePath",
            "setRequestHeader"
          ],
          "props": [
            "crossOrigin",
            "manager",
            "path",
            "resourcePath",
            "requestHeader"
          ]
        },
        "LoaderUtils": {
          "url": "api/zh/loaders/LoaderUtils",
          "methods": ["decodeText", "extractUrlBase"],
          "props": []
        },
        "MaterialLoader": {
          "url": "api/zh/loaders/MaterialLoader",
          "methods": ["load", "parse", "setTextures"],
          "props": ["textures"]
        },
        "ObjectLoader": {
          "url": "api/zh/loaders/ObjectLoader",
          "methods": [
            "load",
            "parse",
            "parseGeometries",
            "parseMaterials",
            "parseAnimations",
            "parseImages",
            "parseTextures",
            "parseObject"
          ],
          "props": []
        },
        "TextureLoader": {
          "url": "api/zh/loaders/TextureLoader",
          "methods": ["load"],
          "props": []
        }
      },
      "加载器 / 管理器": {
        "DefaultLoadingManager": {
          "url": "api/zh/loaders/managers/DefaultLoadingManager",
          "methods": [],
          "props": []
        },
        "LoadingManager": {
          "url": "api/zh/loaders/managers/LoadingManager",
          "methods": [
            "addHandler",
            "getHandler",
            "removeHandler",
            "resolveURL",
            "setURLModifier",
            "itemStart",
            "itemEnd",
            "itemError"
          ],
          "props": ["onStart", "onLoad", "onProgress", "onError"]
        }
      },
      "材质": {
        "LineBasicMaterial": {
          "url": "api/zh/materials/LineBasicMaterial",
          "methods": [],
          "props": ["color", "linewidth", "linecap", "linejoin", "morphTargets"]
        },
        "LineDashedMaterial": {
          "url": "api/zh/materials/LineDashedMaterial",
          "methods": [],
          "props": ["dashSize", "gapSize", "scale"]
        },
        "Material": {
          "url": "api/zh/materials/Material",
          "methods": [
            "clone",
            "copy",
            "dispose",
            "onBeforeCompile",
            "customProgramCacheKey",
            "setValues",
            "toJSON"
          ],
          "props": [
            "alphaTest",
            "alphaToCoverage",
            "blendDst",
            "blendDstAlpha",
            "blendEquation",
            "blendEquationAlpha",
            "blending",
            "blendSrc",
            "blendSrcAlpha",
            "clipIntersection",
            "clippingPlanes",
            "clipShadows",
            "colorWrite",
            "defines",
            "depthFunc",
            "depthTest",
            "depthWrite",
            "stencilWrite",
            "stencilWriteMask",
            "stencilFunc",
            "stencilRef",
            "stencilFuncMask",
            "stencilFail",
            "stencilZFail",
            "stencilZPass",
            "fog",
            "id",
            "name",
            "needsUpdate",
            "opacity",
            "polygonOffset",
            "polygonOffsetFactor",
            "polygonOffsetUnits",
            "precision",
            "premultipliedAlpha",
            "dithering",
            "shadowSide",
            "side",
            "toneMapped",
            "transparent",
            "type",
            "uuid",
            "version",
            "needsUpdate",
            "vertexColors",
            "visible",
            "userData"
          ]
        },
        "MeshBasicMaterial": {
          "url": "api/zh/materials/MeshBasicMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "color",
            "combine",
            "envMap",
            "lightMap",
            "lightMapIntensity",
            "map",
            "morphTargets",
            "reflectivity",
            "refractionRatio",
            "skinning",
            "specularMap",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "MeshDepthMaterial": {
          "url": "api/zh/materials/MeshDepthMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "depthPacking",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "fog",
            "map",
            "morphTargets",
            "skinning",
            "wireframe",
            "wireframeLinewidth"
          ]
        },
        "MeshDistanceMaterial": {
          "url": "api/zh/materials/MeshDistanceMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "farDistance",
            "fog",
            "map",
            "morphTargets",
            "nearDistance",
            "referencePosition",
            "skinning"
          ]
        },
        "MeshLambertMaterial": {
          "url": "api/zh/materials/MeshLambertMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "color",
            "combine",
            "emissive",
            "emissiveMap",
            "emissiveIntensity",
            "envMap",
            "lightMap",
            "lightMapIntensity",
            "map",
            "morphNormals",
            "morphTargets",
            "reflectivity",
            "refractionRatio",
            "skinning",
            "specularMap",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "MeshMatcapMaterial": {
          "url": "api/zh/materials/MeshMatcapMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "bumpMap",
            "bumpScale",
            "color",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "flatShading",
            "map",
            "matcap",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "skinning"
          ]
        },
        "MeshNormalMaterial": {
          "url": "api/zh/materials/MeshNormalMaterial",
          "methods": [],
          "props": [
            "bumpMap",
            "bumpScale",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "flatShading",
            "fog",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "skinning",
            "wireframe",
            "wireframeLinewidth"
          ]
        },
        "MeshPhongMaterial": {
          "url": "api/zh/materials/MeshPhongMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "bumpMap",
            "bumpScale",
            "color",
            "combine",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "emissive",
            "emissiveMap",
            "emissiveIntensity",
            "envMap",
            "flatShading",
            "lightMap",
            "lightMapIntensity",
            "map",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "reflectivity",
            "refractionRatio",
            "shininess",
            "skinning",
            "specular",
            "specularMap",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "MeshPhysicalMaterial": {
          "url": "api/zh/materials/MeshPhysicalMaterial",
          "methods": [],
          "props": [
            "clearcoat",
            "clearcoatMap",
            "clearcoatNormalMap",
            "clearcoatNormalScale",
            "clearcoatRoughness",
            "clearcoatRoughnessMap",
            "defines",
            "ior",
            "reflectivity",
            "sheen",
            "transmission",
            "transmissionMap"
          ]
        },
        "MeshStandardMaterial": {
          "url": "api/zh/materials/MeshStandardMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "bumpMap",
            "bumpScale",
            "color",
            "defines",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "emissive",
            "emissiveMap",
            "emissiveIntensity",
            "envMap",
            "envMapIntensity",
            "flatShading",
            "lightMap",
            "lightMapIntensity",
            "map",
            "metalness",
            "metalnessMap",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "refractionRatio",
            "roughness",
            "roughnessMap",
            "skinning",
            "vertexTangents",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "MeshToonMaterial": {
          "url": "api/zh/materials/MeshToonMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "aoMap",
            "aoMapIntensity",
            "bumpMap",
            "bumpScale",
            "color",
            "displacementMap",
            "displacementScale",
            "displacementBias",
            "emissive",
            "emissiveMap",
            "emissiveIntensity",
            "gradientMap",
            "lightMap",
            "lightMapIntensity",
            "map",
            "morphNormals",
            "morphTargets",
            "normalMap",
            "normalMapType",
            "normalScale",
            "skinning",
            "wireframe",
            "wireframeLinecap",
            "wireframeLinejoin",
            "wireframeLinewidth"
          ]
        },
        "PointsMaterial": {
          "url": "api/zh/materials/PointsMaterial",
          "methods": [],
          "props": [
            "alphaMap",
            "color",
            "map",
            "morphTargets",
            "size",
            "sizeAttenuation"
          ]
        },
        "RawShaderMaterial": {
          "url": "api/zh/materials/RawShaderMaterial",
          "methods": [],
          "props": []
        },
        "ShaderMaterial": {
          "url": "api/zh/materials/ShaderMaterial",
          "methods": ["clone"],
          "props": [
            "clipping",
            "defaultAttributeValues",
            "defines",
            "extensions",
            "fog",
            "fragmentShader",
            "glslVersion",
            "index0AttributeName",
            "lights",
            "linewidth",
            "morphTargets",
            "morphNormals",
            "flatShading",
            "skinning",
            "uniforms",
            "uniformsNeedUpdate",
            "vertexColors",
            "vertexShader",
            "wireframe",
            "wireframeLinewidth"
          ]
        },
        "ShadowMaterial": {
          "url": "api/zh/materials/ShadowMaterial",
          "methods": [],
          "props": ["transparent"]
        },
        "SpriteMaterial": {
          "url": "api/zh/materials/SpriteMaterial",
          "methods": [],
          "props": ["alphaMap", "color", "map", "rotation", "sizeAttenuation"]
        }
      },
      "数学库": {
        "Box2": {
          "url": "api/zh/math/Box2",
          "methods": [
            "clampPoint",
            "clone",
            "containsBox",
            "containsPoint",
            "copy",
            "distanceToPoint",
            "equals",
            "expandByPoint",
            "expandByScalar",
            "expandByVector",
            "getCenter",
            "getParameter",
            "getSize",
            "intersect",
            "intersectsBox",
            "isEmpty",
            "makeEmpty",
            "set",
            "setFromCenterAndSize",
            "setFromPoints",
            "translate",
            "union"
          ],
          "props": ["min", "max"]
        },
        "Box3": {
          "url": "api/zh/math/Box3",
          "methods": [
            "applyMatrix4",
            "clampPoint",
            "clone",
            "containsBox",
            "containsPoint",
            "copy",
            "distanceToPoint",
            "equals",
            "expandByObject",
            "expandByPoint",
            "expandByScalar",
            "expandByVector",
            "getBoundingSphere",
            "getCenter",
            "getParameter",
            "getSize",
            "intersect",
            "intersectsBox",
            "intersectsPlane",
            "intersectsSphere",
            "intersectsTriangle",
            "isEmpty",
            "makeEmpty",
            "set",
            "setFromArray",
            "setFromBufferAttribute",
            "setFromCenterAndSize",
            "setFromObject",
            "setFromPoints",
            "translate",
            "union"
          ],
          "props": ["min", "max"]
        },
        "Color": {
          "url": "api/zh/math/Color",
          "methods": [
            "add",
            "addColors",
            "addScalar",
            "clone",
            "copy",
            "convertGammaToLinear",
            "convertLinearToGamma",
            "convertLinearToSRGB",
            "convertSRGBToLinear",
            "copyGammaToLinear",
            "copyLinearToGamma",
            "copyLinearToSRGB",
            "copySRGBToLinear",
            "equals",
            "fromArray",
            "fromBufferAttribute",
            "getHex",
            "getHexString",
            "getHSL",
            "getStyle",
            "lerp",
            "lerpColors",
            "lerpHSL",
            "multiply",
            "multiplyScalar",
            "offsetHSL",
            "set",
            "setHex",
            "setHSL",
            "setRGB",
            "setScalar",
            "setStyle",
            "setColorName",
            "sub",
            "toArray"
          ],
          "props": ["r", "g", "b"]
        },
        "Cylindrical": {
          "url": "api/zh/math/Cylindrical",
          "methods": [
            "clone",
            "copy",
            "set",
            "setFromVector3",
            "setFromCartesianCoords"
          ],
          "props": ["radius", "theta", "y"]
        },
        "Euler": {
          "url": "api/zh/math/Euler",
          "methods": [
            "copy",
            "clone",
            "equals",
            "fromArray",
            "reorder",
            "set",
            "setFromRotationMatrix",
            "setFromQuaternion",
            "setFromVector3",
            "toArray",
            "toVector3"
          ],
          "props": ["order", "x", "y", "z"]
        },
        "Frustum": {
          "url": "api/zh/math/Frustum",
          "methods": [
            "clone",
            "containsPoint",
            "copy",
            "intersectsBox",
            "intersectsObject",
            "intersectsSphere",
            "intersectsSprite",
            "set",
            "setFromProjectionMatrix"
          ],
          "props": ["planes"]
        },
        "Interpolant": {
          "url": "api/zh/math/Interpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        },
        "Line3": {
          "url": "api/zh/math/Line3",
          "methods": [
            "applyMatrix4",
            "at",
            "clone",
            "closestPointToPoint",
            "closestPointToPointParameter",
            "copy",
            "delta",
            "distance",
            "distanceSq",
            "equals",
            "getCenter",
            "set"
          ],
          "props": ["start", "end"]
        },
        "MathUtils": {
          "url": "api/zh/math/MathUtils",
          "methods": [
            "clamp",
            "degToRad",
            "euclideanModulo",
            "generateUUID",
            "isPowerOfTwo",
            "inverseLerp",
            "lerp",
            "damp",
            "mapLinear",
            "pingpong",
            "ceilPowerOfTwo",
            "floorPowerOfTwo",
            "radToDeg",
            "randFloat",
            "randFloatSpread",
            "randInt",
            "seededRandom",
            "smoothstep",
            "smootherstep",
            "setQuaternionFromProperEuler"
          ],
          "props": []
        },
        "Matrix3": {
          "url": "api/zh/math/Matrix3",
          "methods": [
            "clone",
            "copy",
            "determinant",
            "equals",
            "extractBasis",
            "fromArray",
            "invert",
            "getNormalMatrix",
            "identity",
            "multiply",
            "multiplyMatrices",
            "multiplyScalar",
            "set",
            "premultiply",
            "setFromMatrix4",
            "setUvTransform",
            "toArray",
            "transpose",
            "transposeIntoArray"
          ],
          "props": ["elements"]
        },
        "Matrix4": {
          "url": "api/zh/math/Matrix4",
          "methods": [
            "clone",
            "compose",
            "copy",
            "copyPosition",
            "decompose",
            "determinant",
            "equals",
            "extractBasis",
            "extractRotation",
            "fromArray",
            "invert",
            "getMaxScaleOnAxis",
            "identity",
            "lookAt",
            "makeRotationAxis",
            "makeBasis",
            "makePerspective",
            "makeOrthographic",
            "makeRotationFromEuler",
            "makeRotationFromQuaternion",
            "makeRotationX",
            "makeRotationY",
            "makeRotationZ",
            "makeScale",
            "makeShear",
            "makeTranslation",
            "multiply",
            "multiplyMatrices",
            "multiplyScalar",
            "premultiply",
            "scale",
            "set",
            "setFromMatrix3",
            "setPosition",
            "setPosition",
            "toArray",
            "transpose"
          ],
          "props": ["elements"]
        },
        "Plane": {
          "url": "api/zh/math/Plane",
          "methods": [
            "applyMatrix4",
            "clone",
            "coplanarPoint",
            "copy",
            "distanceToPoint",
            "distanceToSphere",
            "equals",
            "intersectLine",
            "intersectsBox",
            "intersectsLine",
            "intersectsSphere",
            "negate",
            "normalize",
            "projectPoint",
            "set",
            "setComponents",
            "setFromCoplanarPoints",
            "setFromNormalAndCoplanarPoint",
            "translate"
          ],
          "props": ["normal", "constant"]
        },
        "Quaternion": {
          "url": "api/zh/math/Quaternion",
          "methods": [
            "angleTo",
            "clone",
            "conjugate",
            "copy",
            "equals",
            "dot",
            "fromArray",
            "identity",
            "invert",
            "length",
            "lengthSq",
            "normalize",
            "multiply",
            "multiplyQuaternions",
            "premultiply",
            "rotateTowards",
            "slerp",
            "slerpQuaternions",
            "set",
            "setFromAxisAngle",
            "setFromEuler",
            "setFromRotationMatrix",
            "setFromUnitVectors",
            "toArray",
            "fromBufferAttribute",
            "slerpFlat"
          ],
          "props": ["x", "y", "z", "w"]
        },
        "Ray": {
          "url": "api/zh/math/Ray",
          "methods": [
            "applyMatrix4",
            "at",
            "clone",
            "closestPointToPoint",
            "copy",
            "distanceSqToPoint",
            "distanceSqToSegment",
            "distanceToPlane",
            "distanceToPoint",
            "equals",
            "intersectBox",
            "intersectPlane",
            "intersectSphere",
            "intersectTriangle",
            "intersectsBox",
            "intersectsPlane",
            "intersectsSphere",
            "lookAt",
            "recast",
            "set"
          ],
          "props": ["origin", "direction"]
        },
        "Sphere": {
          "url": "api/zh/math/Sphere",
          "methods": [
            "applyMatrix4",
            "clampPoint",
            "clone",
            "containsPoint",
            "copy",
            "distanceToPoint",
            "expandByPoint",
            "isEmpty",
            "makeEmpty",
            "equals",
            "getBoundingBox",
            "intersectsBox",
            "intersectsPlane",
            "intersectsSphere",
            "set",
            "setFromPoints",
            "translate",
            "union"
          ],
          "props": ["center", "radius"]
        },
        "Spherical": {
          "url": "api/zh/math/Spherical",
          "methods": [
            "clone",
            "copy",
            "makeSafe",
            "set",
            "setFromVector3",
            "setFromCartesianCoords"
          ],
          "props": ["radius", "phi", "theta"]
        },
        "SphericalHarmonics3": {
          "url": "api/zh/math/SphericalHarmonics3",
          "methods": [
            "add",
            "addScaledSH",
            "clone",
            "copy",
            "equals",
            "fromArray",
            "getAt",
            "getIrradianceAt",
            "lerp",
            "scale",
            "set",
            "toArray",
            "zero",
            "getBasisAt"
          ],
          "props": ["coefficients"]
        },
        "Triangle": {
          "url": "api/zh/math/Triangle",
          "methods": [
            "clone",
            "closestPointToPoint",
            "containsPoint",
            "copy",
            "equals",
            "getArea",
            "getBarycoord",
            "getMidpoint",
            "getNormal",
            "getPlane",
            "intersectsBox",
            "set",
            "setFromPointsAndIndices"
          ],
          "props": ["a", "b", "c"]
        },
        "Vector2": {
          "url": "api/zh/math/Vector2",
          "methods": [
            "add",
            "addScalar",
            "addScaledVector",
            "addVectors",
            "angle",
            "applyMatrix3",
            "ceil",
            "clamp",
            "clampLength",
            "clampScalar",
            "clone",
            "copy",
            "distanceTo",
            "manhattanDistanceTo",
            "distanceToSquared",
            "divide",
            "divideScalar",
            "dot",
            "cross",
            "equals",
            "floor",
            "fromArray",
            "fromBufferAttribute",
            "getComponent",
            "length",
            "manhattanLength",
            "lengthSq",
            "lerp",
            "lerpVectors",
            "negate",
            "normalize",
            "max",
            "min",
            "multiply",
            "multiplyScalar",
            "rotateAround",
            "round",
            "roundToZero",
            "set",
            "setComponent",
            "setLength",
            "setScalar",
            "setX",
            "setY",
            "sub",
            "subScalar",
            "subVectors",
            "toArray",
            "random"
          ],
          "props": ["height", "width", "x", "y"]
        },
        "Vector3": {
          "url": "api/zh/math/Vector3",
          "methods": [
            "add",
            "addScalar",
            "addScaledVector",
            "addVectors",
            "applyAxisAngle",
            "applyEuler",
            "applyMatrix3",
            "applyMatrix4",
            "applyNormalMatrix",
            "applyQuaternion",
            "angleTo",
            "ceil",
            "clamp",
            "clampLength",
            "clampScalar",
            "clone",
            "copy",
            "cross",
            "crossVectors",
            "distanceTo",
            "manhattanDistanceTo",
            "distanceToSquared",
            "divide",
            "divideScalar",
            "dot",
            "equals",
            "floor",
            "fromArray",
            "fromBufferAttribute",
            "getComponent",
            "length",
            "manhattanLength",
            "lengthSq",
            "lerp",
            "lerpVectors",
            "max",
            "min",
            "multiply",
            "multiplyScalar",
            "multiplyVectors",
            "negate",
            "normalize",
            "project",
            "projectOnPlane",
            "projectOnVector",
            "reflect",
            "round",
            "roundToZero",
            "set",
            "setComponent",
            "setFromCylindrical",
            "setFromCylindricalCoords",
            "setFromMatrixColumn",
            "setFromMatrix3Column",
            "setFromMatrixPosition",
            "setFromMatrixScale",
            "setFromSpherical",
            "setFromSphericalCoords",
            "setLength",
            "setScalar",
            "setX",
            "setY",
            "setZ",
            "sub",
            "subScalar",
            "subVectors",
            "toArray",
            "transformDirection",
            "unproject",
            "random"
          ],
          "props": ["x", "y", "z"]
        },
        "Vector4": {
          "url": "api/zh/math/Vector4",
          "methods": [
            "add",
            "addScalar",
            "addScaledVector",
            "addVectors",
            "applyMatrix4",
            "ceil",
            "clamp",
            "clampLength",
            "clampScalar",
            "clone",
            "copy",
            "divideScalar",
            "dot",
            "equals",
            "floor",
            "fromArray",
            "fromBufferAttribute",
            "getComponent",
            "length",
            "manhattanLength",
            "lengthSq",
            "lerp",
            "lerpVectors",
            "negate",
            "normalize",
            "max",
            "min",
            "multiply",
            "multiplyScalar",
            "round",
            "roundToZero",
            "set",
            "setAxisAngleFromQuaternion",
            "setAxisAngleFromRotationMatrix",
            "setComponent",
            "setLength",
            "setScalar",
            "setX",
            "setY",
            "setZ",
            "setW",
            "sub",
            "subScalar",
            "subVectors",
            "toArray",
            "random"
          ],
          "props": ["x", "y", "z", "w", "width", "height"]
        }
      },
      "数学库 / 插值": {
        "CubicInterpolant": {
          "url": "api/zh/math/interpolants/CubicInterpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        },
        "DiscreteInterpolant": {
          "url": "api/zh/math/interpolants/DiscreteInterpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        },
        "LinearInterpolant": {
          "url": "api/zh/math/interpolants/LinearInterpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        },
        "QuaternionLinearInterpolant": {
          "url": "api/zh/math/interpolants/QuaternionLinearInterpolant",
          "methods": ["evaluate"],
          "props": [
            "parameterPositions",
            "resultBuffer",
            "sampleValues",
            "settings",
            "valueSize"
          ]
        }
      },
      "物体": {
        "Bone": {
          "url": "api/zh/objects/Bone",
          "methods": [],
          "props": ["type"]
        },
        "Group": {
          "url": "api/zh/objects/Group",
          "methods": [],
          "props": ["type"]
        },
        "InstancedMesh": {
          "url": "api/zh/objects/InstancedMesh",
          "methods": [
            "dispose",
            "getColorAt",
            "getMatrixAt",
            "setColorAt",
            "setMatrixAt"
          ],
          "props": ["count", "instanceColor", "instanceMatrix"]
        },
        "Line": {
          "url": "api/zh/objects/Line",
          "methods": [
            "computeLineDistances",
            "raycast",
            "clone",
            "updateMorphTargets"
          ],
          "props": [
            "geometry",
            "material",
            "morphTargetInfluences",
            "morphTargetDictionary"
          ]
        },
        "LineLoop": {
          "url": "api/zh/objects/LineLoop",
          "methods": [],
          "props": []
        },
        "LineSegments": {
          "url": "api/zh/objects/LineSegments",
          "methods": [],
          "props": []
        },
        "LOD": {
          "url": "api/zh/objects/LOD",
          "methods": [
            "addLevel",
            "clone",
            "getCurrentLevel",
            "getObjectForDistance",
            "raycast",
            "toJSON",
            "update"
          ],
          "props": ["autoUpdate", "levels"]
        },
        "Mesh": {
          "url": "api/zh/objects/Mesh",
          "methods": ["clone", "raycast", "updateMorphTargets"],
          "props": [
            "geometry",
            "material",
            "morphTargetInfluences",
            "morphTargetDictionary"
          ]
        },
        "Points": {
          "url": "api/zh/objects/Points",
          "methods": ["raycast", "clone", "updateMorphTargets"],
          "props": [
            "geometry",
            "material",
            "morphTargetInfluences",
            "morphTargetDictionary"
          ]
        },
        "Skeleton": {
          "url": "api/zh/objects/Skeleton",
          "methods": [
            "clone",
            "calculateInverses",
            "pose",
            "update",
            "getBoneByName",
            "dispose"
          ],
          "props": [
            "bones",
            "boneInverses",
            "boneMatrices",
            "boneTexture",
            "boneTextureSize"
          ]
        },
        "SkinnedMesh": {
          "url": "api/zh/objects/SkinnedMesh",
          "methods": [
            "bind",
            "clone",
            "normalizeSkinWeights",
            "pose",
            "updateMatrixWorld"
          ],
          "props": ["bindMode", "bindMatrix", "bindMatrixInverse", "skeleton"]
        },
        "Sprite": {
          "url": "api/zh/objects/Sprite",
          "methods": ["clone", "copy", "raycast"],
          "props": ["material", "center"]
        }
      },
      "渲染器": {
        "WebGLMultisampleRenderTarget": {
          "url": "api/zh/renderers/WebGLMultisampleRenderTarget",
          "methods": [],
          "props": ["samples"]
        },
        "WebGLRenderer": {
          "url": "api/zh/renderers/WebGLRenderer",
          "methods": [
            "clear",
            "clearColor",
            "clearDepth",
            "clearStencil",
            "clearTarget",
            "compile",
            "copyFramebufferToTexture",
            "copyTextureToTexture",
            "dispose",
            "forceContextLoss",
            "getClearAlpha",
            "getClearColor",
            "getContext",
            "getContextAttributes",
            "getActiveCubeFace",
            "getActiveMipmapLevel",
            "getRenderTarget",
            "getCurrentViewport",
            "getDrawingBufferSize",
            "getPixelRatio",
            "getSize",
            "initTexture",
            "resetGLState",
            "readRenderTargetPixels",
            "render",
            "renderBufferDirect",
            "renderBufferImmediate",
            "resetState",
            "setAnimationLoop",
            "setClearAlpha",
            "setClearColor",
            "setPixelRatio",
            "setRenderTarget",
            "setScissor",
            "setScissorTest",
            "setSize",
            "setViewport"
          ],
          "props": [
            "autoClear",
            "autoClearColor",
            "autoClearDepth",
            "autoClearStencil",
            "capabilities",
            "maxVertexTextures",
            "clippingPlanes",
            "domElement",
            "extensions",
            "gammaFactor",
            "outputEncoding",
            "info",
            "localClippingEnabled",
            "physicallyCorrectLights",
            "properties",
            "renderLists",
            "shadowMap",
            "sortObjects",
            "state",
            "toneMapping",
            "toneMappingExposure",
            "xr"
          ]
        },
        "WebGL1Renderer": {
          "url": "api/zh/renderers/WebGL1Renderer",
          "methods": [],
          "props": []
        },
        "WebGLRenderTarget": {
          "url": "api/zh/renderers/WebGLRenderTarget",
          "methods": ["setSize", "clone", "copy", "dispose"],
          "props": [
            "width",
            "height",
            "scissor",
            "scissorTest",
            "viewport",
            "texture",
            "depthBuffer",
            "stencilBuffer",
            "depthTexture"
          ]
        },
        "WebGLCubeRenderTarget": {
          "url": "api/zh/renderers/WebGLCubeRenderTarget",
          "methods": ["fromEquirectangularTexture", "clear"],
          "props": []
        }
      },
      "渲染器 / 着色器": {
        "ShaderChunk": {
          "url": "api/zh/renderers/shaders/ShaderChunk",
          "methods": [],
          "props": []
        },
        "ShaderLib": {
          "url": "api/zh/renderers/shaders/ShaderLib",
          "methods": [],
          "props": []
        },
        "UniformsLib": {
          "url": "api/zh/renderers/shaders/UniformsLib",
          "methods": [],
          "props": []
        },
        "UniformsUtils": {
          "url": "api/zh/renderers/shaders/UniformsUtils",
          "methods": ["clone", "merge"],
          "props": []
        }
      },
      "渲染器 / WebXR": {
        "WebXRManager": {
          "url": "api/zh/renderers/webxr/WebXRManager",
          "methods": [
            "getController",
            "getControllerGrip",
            "setFramebufferScaleFactor",
            "setReferenceSpaceType"
          ],
          "props": ["enabled", "isPresenting"]
        }
      },
      "场景": {
        "Fog": {
          "url": "api/zh/scenes/Fog",
          "methods": ["clone", "toJSON"],
          "props": ["name", "color", "near", "far"]
        },
        "FogExp2": {
          "url": "api/zh/scenes/FogExp2",
          "methods": ["clone", "toJSON"],
          "props": ["name", "color", "density"]
        },
        "Scene": {
          "url": "api/zh/scenes/Scene",
          "methods": ["toJSON"],
          "props": [
            "autoUpdate",
            "background",
            "environment",
            "fog",
            "overrideMaterial"
          ]
        }
      },
      "纹理贴图": {
        "CanvasTexture": {
          "url": "api/zh/textures/CanvasTexture",
          "methods": [],
          "props": ["needsUpdate"]
        },
        "CompressedTexture": {
          "url": "api/zh/textures/CompressedTexture",
          "methods": [],
          "props": ["flipY", "generateMipmaps"]
        },
        "CubeTexture": {
          "url": "api/zh/textures/CubeTexture",
          "methods": [],
          "props": []
        },
        "DataTexture": {
          "url": "api/zh/textures/DataTexture",
          "methods": [],
          "props": ["image"]
        },
        "DataTexture2DArray": {
          "url": "api/zh/textures/DataTexture2DArray",
          "methods": [],
          "props": ["image"]
        },
        "DataTexture3D": {
          "url": "api/zh/textures/DataTexture3D",
          "methods": [],
          "props": ["wrapR"]
        },
        "DepthTexture": {
          "url": "api/zh/textures/DepthTexture",
          "methods": [],
          "props": []
        },
        "Texture": {
          "url": "api/zh/textures/Texture",
          "methods": [
            "updateMatrix",
            "clone",
            "toJSON",
            "dispose",
            "transformUv"
          ],
          "props": [
            "id",
            "uuid",
            "name",
            "image",
            "mipmaps",
            "mapping",
            "wrapS",
            "wrapT",
            "wrapS",
            "magFilter",
            "minFilter",
            "anisotropy",
            "format",
            "internalFormat",
            "type",
            "offset",
            "repeat",
            "rotation",
            "center",
            "matrixAutoUpdate",
            "matrix",
            "generateMipmaps",
            "premultiplyAlpha",
            "flipY",
            "unpackAlignment",
            "encoding",
            "version",
            "needsUpdate",
            "onUpdate",
            "needsUpdate"
          ]
        },
        "VideoTexture": {
          "url": "api/zh/textures/VideoTexture",
          "methods": ["update"],
          "props": ["needsUpdate", "needsUpdate"]
        }
      }
    },
    "示例": {
      "动画": {
        "CCDIKSolver": {
          "url": "examples/zh/animations/CCDIKSolver",
          "methods": ["createHelper", "update", "updateOne"],
          "props": ["iks", "mesh"]
        },
        "MMDAnimationHelper": {
          "url": "examples/zh/animations/MMDAnimationHelper",
          "methods": ["add", "enable", "pose", "remove", "update"],
          "props": ["audio", "camera", "meshes", "objects", "onBeforePhysics"]
        },
        "MMDPhysics": {
          "url": "examples/zh/animations/MMDPhysics",
          "methods": [
            "createHelper",
            "reset",
            "setGravity",
            "update",
            "warmup"
          ],
          "props": ["mesh"]
        }
      },
      "控制": {
        "DeviceOrientationControls": {
          "url": "examples/zh/controls/DeviceOrientationControls",
          "methods": ["connect", "disconnect", "dispose", "update"],
          "props": [
            "alphaOffset",
            "deviceOrientation",
            "enabled",
            "object",
            "screenOrientation"
          ]
        },
        "DragControls": {
          "url": "examples/zh/controls/DragControls",
          "methods": ["activate", "deactivate", "dispose", "getObjects"],
          "props": ["enabled", "transformGroup"]
        },
        "FirstPersonControls": {
          "url": "examples/zh/controls/FirstPersonControls",
          "methods": ["dispose", "handleResize", "lookAt", "lookAt", "update"],
          "props": [
            "activeLook",
            "autoForward",
            "constrainVertical",
            "domElement",
            "enabled",
            "heightCoef",
            "heightMax",
            "heightMin",
            "heightSpeed",
            "lookVertical",
            "lookSpeed",
            "mouseDragOn",
            "movementSpeed",
            "object",
            "verticalMax",
            "verticalMin"
          ]
        },
        "FlyControls": {
          "url": "examples/zh/controls/FlyControls",
          "methods": ["dispose", "update"],
          "props": [
            "autoForward",
            "domElement",
            "dragToLook",
            "movementSpeed",
            "object",
            "rollSpeed"
          ]
        },
        "OrbitControls": {
          "url": "examples/zh/controls/OrbitControls",
          "methods": [
            "dispose",
            "getAzimuthalAngle",
            "getPolarAngle",
            "listenToKeyEvents",
            "reset",
            "saveState",
            "update"
          ],
          "props": [
            "autoRotate",
            "autoRotateSpeed",
            "dampingFactor",
            "domElement",
            "enabled",
            "enableDamping",
            "enablePan",
            "enableRotate",
            "enableZoom",
            "keyPanSpeed",
            "keys",
            "maxAzimuthAngle",
            "maxDistance",
            "maxPolarAngle",
            "maxZoom",
            "minAzimuthAngle",
            "minDistance",
            "minPolarAngle",
            "minZoom",
            "mouseButtons",
            "object",
            "panSpeed",
            "position0",
            "rotateSpeed",
            "screenSpacePanning",
            "target0",
            "target",
            "touches",
            "zoom0",
            "zoomSpeed"
          ]
        },
        "PointerLockControls": {
          "url": "examples/zh/controls/PointerLockControls",
          "methods": [
            "connect",
            "disconnect",
            "getDirection",
            "lock",
            "moveForward",
            "moveRight",
            "unlock"
          ],
          "props": ["domElement", "isLocked", "maxPolarAngle", "minPolarAngle"]
        },
        "TrackballControls": {
          "url": "examples/zh/controls/TrackballControls",
          "methods": [
            "checkDistances",
            "dispose",
            "handleResize",
            "panCamera",
            "reset",
            "rotateCamera",
            "update",
            "zoomCamera"
          ],
          "props": [
            "domElement",
            "dynamicDampingFactor",
            "enabled",
            "keys",
            "maxDistance",
            "minDistance",
            "mouseButtons",
            "noPan",
            "noRotate",
            "noZoom",
            "object",
            "panSpeed",
            "rotateSpeed",
            "screen",
            "staticMoving",
            "zoomSpeed"
          ]
        },
        "TransformControls": {
          "url": "examples/zh/controls/TransformControls",
          "methods": [
            "attach",
            "detach",
            "dispose",
            "getMode",
            "setMode",
            "setRotationSnap",
            "setSize",
            "setSpace",
            "setTranslationSnap"
          ],
          "props": [
            "axis",
            "camera",
            "domElement",
            "dragging",
            "enabled",
            "mode",
            "object",
            "rotationSnap",
            "showX",
            "showY",
            "showZ",
            "size",
            "space",
            "translationSnap"
          ]
        }
      },
      "几何体": {
        "ConvexGeometry": {
          "url": "examples/zh/geometries/ConvexGeometry",
          "methods": [],
          "props": []
        },
        "DecalGeometry": {
          "url": "examples/zh/geometries/DecalGeometry",
          "methods": [],
          "props": []
        }
      },
      "辅助对象": {
        "LightProbeHelper": {
          "url": "examples/zh/helpers/LightProbeHelper",
          "methods": ["dispose"],
          "props": ["lightProbe", "size"]
        },
        "PositionalAudioHelper": {
          "url": "examples/zh/helpers/PositionalAudioHelper",
          "methods": ["dispose", "update"],
          "props": [
            "audio",
            "range",
            "divisionsInnerAngle",
            "divisionsOuterAngle"
          ]
        },
        "RectAreaLightHelper": {
          "url": "examples/zh/helpers/RectAreaLightHelper",
          "methods": ["dispose"],
          "props": ["light", "color"]
        },
        "VertexNormalsHelper": {
          "url": "examples/zh/helpers/VertexNormalsHelper",
          "methods": ["update"],
          "props": ["matrixAutoUpdate", "object", "size"]
        },
        "VertexTangentsHelper": {
          "url": "examples/zh/helpers/VertexTangentsHelper",
          "methods": ["update"],
          "props": ["matrixAutoUpdate", "object", "size"]
        }
      },
      "灯光": {
        "LightProbeGenerator": {
          "url": "examples/zh/lights/LightProbeGenerator",
          "methods": ["fromCubeTexture", "fromCubeRenderTarget"],
          "props": []
        }
      },
      "加载器": {
        "BasisTextureLoader": {
          "url": "examples/zh/loaders/BasisTextureLoader",
          "methods": [
            "load",
            "detectSupport",
            "setTranscoderPath",
            "setWorkerLimit",
            "dispose"
          ],
          "props": []
        },
        "DRACOLoader": {
          "url": "examples/zh/loaders/DRACOLoader",
          "methods": [
            "load",
            "setDecoderPath",
            "setDecoderConfig",
            "setWorkerLimit",
            "preload",
            "dispose"
          ],
          "props": []
        },
        "GLTFLoader": {
          "url": "examples/zh/loaders/GLTFLoader",
          "methods": ["load", "setDRACOLoader", "parse"],
          "props": []
        },
        "MMDLoader": {
          "url": "examples/zh/loaders/MMDLoader",
          "methods": [
            "load",
            "loadAnimation",
            "loadWithAnimation",
            "setAnimationPath"
          ],
          "props": []
        },
        "MTLLoader": {
          "url": "examples/zh/loaders/MTLLoader",
          "methods": ["load", "setMaterialOptions", "parse"],
          "props": []
        },
        "OBJLoader": {
          "url": "examples/zh/loaders/OBJLoader",
          "methods": ["load", "parse", "setMaterials"],
          "props": []
        },
        "PCDLoader": {
          "url": "examples/zh/loaders/PCDLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "PDBLoader": {
          "url": "examples/zh/loaders/PDBLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "PRWMLoader": {
          "url": "examples/zh/loaders/PRWMLoader",
          "methods": ["load", "parse"],
          "props": []
        },
        "SVGLoader": {
          "url": "examples/zh/loaders/SVGLoader",
          "methods": ["load", "createShapes"],
          "props": []
        },
        "TGALoader": {
          "url": "examples/zh/loaders/TGALoader",
          "methods": ["load"],
          "props": []
        }
      },
      "物体": {
        "Lensflare": {
          "url": "examples/zh/objects/Lensflare",
          "methods": [],
          "props": []
        }
      },
      "后期处理": {
        "EffectComposer": {
          "url": "examples/zh/postprocessing/EffectComposer",
          "methods": [
            "addPass",
            "insertPass",
            "isLastEnabledPass",
            "removePass",
            "render",
            "reset",
            "setPixelRatio",
            "setSize",
            "swapBuffers"
          ],
          "props": [
            "passes",
            "readBuffer",
            "renderer",
            "renderToScreen",
            "writeBuffer"
          ]
        }
      },
      "导出器": {
        "GLTFExporter": {
          "url": "examples/zh/exporters/GLTFExporter",
          "methods": ["parse"],
          "props": []
        },
        "PLYExporter": {
          "url": "examples/zh/exporters/PLYExporter",
          "methods": ["parse"],
          "props": []
        },
        "ColladaExporter": {
          "url": "examples/zh/exporters/ColladaExporter",
          "methods": ["parse"],
          "props": []
        }
      },
      "数学库": {
        "LookupTable": {
          "url": "examples/zh/math/Lut",
          "methods": [
            "copy",
            "setMin",
            "setMax",
            "changeNumberOfColors",
            "changeColorMap",
            "addColorMap",
            "getColor"
          ],
          "props": ["minV", "maxV"]
        },
        "MeshSurfaceSampler": {
          "url": "examples/zh/math/MeshSurfaceSampler",
          "methods": ["setWeightAttribute", "build", "sample"],
          "props": []
        },
        "OBB": {
          "url": "examples/en/math/OBB",
          "methods": [
            "applyMatrix4",
            "clampPoint",
            "clone",
            "containsPoint",
            "copy",
            "equals",
            "fromBox3",
            "getSize",
            "intersectsBox3",
            "intersectsSphere",
            "intersectsOBB",
            "intersectsRay",
            "intersectRay",
            "set"
          ],
          "props": ["center", "halfSize", "rotation"]
        }
      },
      "QuickHull": {
        "Face": {
          "url": "examples/zh/math/convexhull/Face",
          "methods": ["create", "getEdge", "compute", "distanceToPoint"],
          "props": [
            "normal",
            "midpoint",
            "area",
            "constant",
            "outside",
            "mark",
            "edge"
          ]
        },
        "HalfEdge": {
          "url": "examples/zh/math/convexhull/HalfEdge",
          "methods": ["head", "tail", "length", "lengthSquared", "setTwin"],
          "props": ["vertex", "prev", "next", "twin", "face"]
        },
        "ConvexHull": {
          "url": "examples/zh/math/convexhull/ConvexHull",
          "methods": [
            "addAdjoiningFace",
            "addNewFaces",
            "addVertexToFace",
            "addVertexToHull",
            "cleanup",
            "compute",
            "computeExtremes",
            "computeHorizon",
            "computeInitialHull",
            "containsPoint",
            "deleteFaceVertices",
            "intersectRay",
            "intersectsRay",
            "makeEmpty",
            "nextVertexToAdd",
            "reindexFaces",
            "removeAllVerticesFromFace",
            "removeVertexFromFace",
            "resolveUnassignedPoints",
            "setFromObject",
            "setFromPoints"
          ],
          "props": [
            "assigned",
            "faces",
            "newFaces",
            "tolerance",
            "unassigned",
            "vertices"
          ]
        },
        "VertexNode": {
          "url": "examples/zh/math/convexhull/VertexNode",
          "methods": [],
          "props": ["point", "prev", "next", "face"]
        },
        "VertexList": {
          "url": "examples/zh/math/convexhull/VertexList",
          "methods": [
            "first",
            "last",
            "clear",
            "insertBefore",
            "insertAfter",
            "append",
            "appendChain",
            "remove",
            "removeSubList",
            "isEmpty"
          ],
          "props": ["head", "tail"]
        }
      },
      "渲染器": {
        "CSS2DRenderer": {
          "url": "examples/zh/renderers/CSS2DRenderer",
          "methods": ["getSize", "render", "setSize"],
          "props": []
        },
        "CSS3DRenderer": {
          "url": "examples/zh/renderers/CSS3DRenderer",
          "methods": ["getSize", "render", "setSize"],
          "props": []
        },
        "SVGRenderer": {
          "url": "examples/zh/renderers/SVGRenderer",
          "methods": [
            "clear",
            "getSize",
            "render",
            "setClearColor",
            "setPrecision",
            "setQuality",
            "setSize"
          ],
          "props": []
        }
      },
      "实用工具": {
        "BufferGeometryUtils": {
          "url": "examples/zh/utils/BufferGeometryUtils",
          "methods": [
            "mergeBufferGeometries",
            "mergeBufferAttributes",
            "interleaveAttributes",
            "estimateBytesUsed",
            "mergeVertices",
            "toTrianglesDrawMode"
          ],
          "props": []
        },
        "SceneUtils": {
          "url": "examples/zh/utils/SceneUtils",
          "methods": [
            "createMeshesFromInstancedMesh",
            "createMultiMaterialObject"
          ],
          "props": []
        },
        "SkeletonUtils": {
          "url": "examples/zh/utils/SkeletonUtils",
          "methods": [
            "clone",
            "findBoneTrackData",
            "getBoneByName",
            "getBones",
            "getEqualsBonesNames",
            "getHelperFromSkeleton",
            "getNearestBone",
            "getSkeletonOffsets",
            "renameBones",
            "retarget",
            "retargetClip"
          ],
          "props": []
        }
      }
    },
    "开发者参考": {
      "差异化支持": {
        "Polyfills": { "url": "api/zh/Polyfills", "methods": [], "props": [] }
      },
      "WebGL渲染器": {
        "WebGLProgram": {
          "url": "api/zh/renderers/webgl/WebGLProgram",
          "methods": ["getUniforms", "getAttributes", "destroy"],
          "props": [
            "name",
            "id",
            "cacheKey",
            "usedTimes",
            "program",
            "vertexShader",
            "fragmentShader"
          ]
        },
        "WebGLShader": {
          "url": "api/zh/renderers/webgl/WebGLShader",
          "methods": [],
          "props": []
        },
        "WebGLState": {
          "url": "api/zh/renderers/webgl/WebGLState",
          "methods": [
            "enable",
            "disable",
            "setDepthTest",
            "setDepthWrite",
            "setBlending"
          ],
          "props": []
        }
      }
    }
  },
  "ko": {
    "매뉴얼": {
      "시작하기": {
        "장면 만들기": {
          "url": "manual/ko/introduction/Creating-a-scene",
          "methods": [],
          "props": []
        },
        "설치": {
          "url": "manual/ko/introduction/Installation",
          "methods": [],
          "props": []
        },
        "브라우저 지원": {
          "url": "manual/ko/introduction/Browser-support",
          "methods": [],
          "props": []
        },
        "WebGL 호환성 검사": {
          "url": "manual/ko/introduction/WebGL-compatibility-check",
          "methods": [],
          "props": []
        },
        "로컬 환경에서 구동 방법": {
          "url": "manual/ko/introduction/How-to-run-things-locally",
          "methods": [],
          "props": []
        },
        "선 그리기": {
          "url": "manual/ko/introduction/Drawing-lines",
          "methods": [],
          "props": []
        },
        "텍스트 만들기": {
          "url": "manual/ko/introduction/Creating-text",
          "methods": [],
          "props": []
        },
        "3D 모델 불러오기": {
          "url": "manual/ko/introduction/Loading-3D-models",
          "methods": [],
          "props": []
        },
        "FAQ": {
          "url": "manual/ko/introduction/FAQ",
          "methods": [],
          "props": []
        },
        "참고 링크": {
          "url": "manual/ko/introduction/Useful-links",
          "methods": [],
          "props": []
        }
      },
      "심화 과정": {
        "오브젝트를 업데이트하는 방법": {
          "url": "manual/ko/introduction/How-to-update-things",
          "methods": [],
          "props": []
        },
        "오브젝트를 폐기하는 방법": {
          "url": "manual/ko/introduction/How-to-dispose-of-objects",
          "methods": [],
          "props": []
        },
        "VR 컨텐츠를 만드는 방법": {
          "url": "manual/ko/introduction/How-to-create-VR-content",
          "methods": [],
          "props": []
        },
        "후처리 사용 방법": {
          "url": "manual/ko/introduction/How-to-use-post-processing",
          "methods": [],
          "props": []
        },
        "행렬 변환": {
          "url": "manual/ko/introduction/Matrix-transformations",
          "methods": [],
          "props": []
        },
        "애니메이션 시스템": {
          "url": "manual/ko/introduction/Animation-system",
          "methods": [],
          "props": []
        }
      },
      "빌드 도구": {
        "NPM 테스트": {
          "url": "manual/ko/buildTools/Testing-with-NPM",
          "methods": [],
          "props": []
        }
      }
    },
    "레퍼런스": {
      "애니메이션": {
        "AnimationAction": {
          "url": "api/ko/animation/AnimationAction",
          "methods": [
            "crossFadeFrom",
            "crossFadeTo",
            "fadeIn",
            "fadeOut",
            "getEffectiveTimeScale",
            "getEffectiveWeight",
            "getClip",
            "getMixer",
            "getRoot",
            "halt",
            "isRunning",
            "isScheduled",
            "play",
            "reset",
            "setDuration",
            "setEffectiveTimeScale",
            "setEffectiveWeight",
            "setLoop",
            "startAt",
            "stop",
            "stopFading",
            "stopWarping",
            "syncWith",
            "warp"
          ],
          "props": [
            "clampWhenFinished",
            "enabled",
            "loop",
            "time",
            "timeScale",
            "weight",
            "zeroSlopeAtEnd",
            "zeroSlopeAtStart"
          ]
        },
        "AnimationClip": {
          "url": "api/ko/animation/AnimationClip",
          "methods": [
            "clone",
            "optimize",
            "resetDuration",
            "toJSON",
            "trim",
            "validate",
            "CreateClipsFromMorphTargetSequences",
            "CreateFromMorphTargetSequence",
            "findByName",
            "parse",
            "parseAnimation",
            "toJSON"
          ],
          "props": ["duration", "name", "tracks", "uuid"]
        },
        "AnimationMixer": {
          "url": "api/ko/animation/AnimationMixer",
          "methods": [
            "clipAction",
            "existingAction",
            "getRoot",
            "stopAllAction",
            "update",
            "setTime",
            "uncacheClip",
            "uncacheRoot",
            "uncacheAction"
          ],
          "props": ["time", "timeScale"]
        },
        "AnimationObjectGroup": {
          "url": "api/ko/animation/AnimationObjectGroup",
          "methods": ["add", "remove", "uncache"],
          "props": ["stats", "uuid"]
        },
        "AnimationUtils": {
          "url": "api/ko/animation/AnimationUtils",
          "methods": [
            "arraySlice",
            "convertArray",
            "flattenJSON",
            "getKeyframeOrder",
            "isTypedArray",
            "sortedArray",
            "subclip"
          ],
          "props": []
        },
        "KeyframeTrack": {
          "url": "api/ko/animation/KeyframeTrack",
          "methods": [
            "clone",
            "createInterpolant",
            "getInterpolation",
            "getValueSize",
            "InterpolantFactoryMethodDiscrete",
            "InterpolantFactoryMethodLinear",
            "InterpolantFactoryMethodSmooth",
            "optimize",
            "scale",
            "setInterpolation",
            "shift",
            "trim",
            "validate",
            "toJSON"
          ],
          "props": [
            "name",
            "times",
            "values",
            "DefaultInterpolation",
            "TimeBufferType ",
            "ValueBufferType "
          ]
        },
        "PropertyBinding": {
          "url": "api/ko/animation/PropertyBinding",
          "methods": [
            "getValue",
            "setValue",
            "bind",
            "unbind",
            "Composite",
            "create",
            "parseTrackName",
            "findNode"
          ],
          "props": [
            "path",
            "parsedPath",
            "node",
            "rootNode",
            "BindingType",
            "Versioning",
            "GetterByBindingType",
            "SetterByBindingTypeAndVersioning"
          ]
        },
        "PropertyMixer": {
          "url": "api/ko/animation/PropertyMixer",
          "methods": [
            "accumulate",
            "apply",
            "saveOriginalState",
            "restoreOriginalState"
          ],
          "props": [
            "binding",
            "buffer",
            "cumulativeWeight",
            "valueSize",
            "referenceCount",
            "useCount"
          ]
        }
      },
      "애니메이션 / 트랙": {
        "BooleanKeyframeTrack": {
          "url": "api/ko/animation/tracks/BooleanKeyframeTrack",
          "methods": [
            "InterpolantFactoryMethodLinear ",
            "InterpolantFactoryMethodSmooth "
          ],
          "props": ["DefaultInterpolation", "ValueBufferType", "ValueTypeName"]
        },
        "ColorKeyframeTrack": {
          "url": "api/ko/animation/tracks/ColorKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        },
        "NumberKeyframeTrack": {
          "url": "api/ko/animation/tracks/NumberKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        },
        "QuaternionKeyframeTrack": {
          "url": "api/ko/animation/tracks/QuaternionKeyframeTrack",
          "methods": ["InterpolantFactoryMethodLinear"],
          "props": ["DefaultInterpolation", "ValueTypeName"]
        },
        "StringKeyframeTrack": {
          "url": "api/ko/animation/tracks/StringKeyframeTrack",
          "methods": [
            "InterpolantFactoryMethodLinear",
            "InterpolantFactoryMethodSmooth"
          ],
          "props": ["DefaultInterpolation", "ValueTypeName"]
        },
        "VectorKeyframeTrack": {
          "url": "api/ko/animation/tracks/VectorKeyframeTrack",
          "methods": [],
          "props": ["ValueTypeName"]
        }
      },
      "오디오": {
        "Audio": {
          "url": "api/ko/audio/Audio",
          "methods": [
            "connect",
            "disconnect",
            "getFilter",
            "getFilters",
            "getLoop",
            "getOutput",
            "getPlaybackRate",
            "getVolume",
            "play",
            "pause",
            "onEnded",
            "setBuffer",
            "setFilter",
            "setFilters",
            "setLoop",
            "setLoopStart",
            "setLoopEnd",
            "setMediaElementSource",
            "setMediaStreamSource",
            "setNodeSource",
            "setPlaybackRate",
            "setVolume",
            "stop"
          ],
          "props": [
            "autoplay",
            "context",
            "detune",
            "filters",
            "gain",
            "hasPlaybackControl",
            "isPlaying",
            "listener",
            "playbackRate",
            "offset",
            "duration",
            "source",
            "sourceType",
            "type"
          ]
        },
        "AudioAnalyser": {
          "url": "api/ko/audio/AudioAnalyser",
          "methods": ["getFrequencyData", "getAverageFrequency"],
          "props": ["analyser", "fftSize", "data"]
        },
        "AudioContext": {
          "url": "api/ko/audio/AudioContext",
          "methods": ["getContext", "setContext"],
          "props": []
        },
        "AudioListener": {
          "url": "api/ko/audio/AudioListener",
          "methods": [
            "getInput",
            "removeFilter",
            "getFilter",
            "setFilter",
            "getMasterVolume",
            "setMasterVolume"
          ],
          "props": ["context", "gain", "filter", "timeDelta"]
        },
        "PositionalAudio": {
          "url": "api/ko/audio/PositionalAudio",
          "methods": [
            "getOutput",
            "getRefDistance",
            "setRefDistance",
            "getRolloffFactor",
            "setRolloffFactor",
            "getDistanceModel",
            "setDistanceModel",
            "getMaxDistance",
            "setMaxDistance",
            "setDirectionalCone"
          ],
          "props": ["panner"]
        }
      },
      "카메라": {
        "ArrayCamera": {
          "url": "api/ko/cameras/ArrayCamera",
          "methods": [],
          "props": ["cameras"]
        },
        "Camera": {
          "url": "api/ko/cameras/Camera",
          "methods": ["clone", "copy", "getWorldDirection"],
          "props": [
            "layers",
            "matrixWorldInverse",
            "projectionMatrix",
            "projectionMatrixInverse"
          ]
        },
        "CubeCamera": {
          "url": "api/ko/cameras/CubeCamera",
          "methods": ["update"],
          "props": ["renderTarget"]
        },
        "OrthographicCamera": {
          "url": "api/ko/cameras/OrthographicCamera",
          "methods": [
            "setViewOffset",
            "clearViewOffset",
            "updateProjectionMatrix",
            "toJSON"
          ],
          "props": [
            "bottom",
            "far",
            "left",
            "near",
            "right",
            "top",
            "view",
            "zoom"
          ]
        },
        "PerspectiveCamera": {
          "url": "api/ko/cameras/PerspectiveCamera",
          "methods": [
            "clearViewOffset",
            "getEffectiveFOV",
            "getFilmHeight",
            "getFilmWidth",
            "getFocalLength",
            "setFocalLength",
            "setViewOffset",
            "updateProjectionMatrix",
            "toJSON"
          ],
          "props": [
            "aspect",
            "far",
            "filmGauge",
            "filmOffset",
            "focus",
            "fov",
            "near",
            "view",
            "zoom"
          ]
        },
        "StereoCamera": {
          "url": "api/ko/cameras/StereoCamera",
          "methods": ["update"],
          "props": ["aspect", "eyeSep", "cameraL", "cameraR"]
        }
      },
      "상수": {
        "Animation": {
          "url": "api/ko/constants/Animation",
          "methods": [],
          "props": []
        },
        "Core": { "url": "api/ko/constants/Core", "methods": [], "props": [] },
        "CustomBlendingEquation": {
          "url": "api/ko/constants/CustomBlendingEquations",
          "methods": [],
          "props": []
        },
        "Materials": {
          "url": "api/ko/constants/Materials",
          "methods": [],
          "props": []
        },
        "Renderer": {
          "url": "api/ko/constants/Renderer",
          "methods": [],
          "props": []
        },
        "Textures": {
          "url": "api/ko/constants/Textures",
          "methods": [],
          "props": []
        }
      }
    },
    "예제": {
      "컨트롤": {
        "DeviceOrientationControls": {
          "url": "examples/ko/controls/DeviceOrientationControls",
          "methods": ["connect", "disconnect", "dispose", "update"],
          "props": [
            "alphaOffset",
            "deviceOrientation",
            "enabled",
            "object",
            "screenOrientation"
          ]
        },
        "DragControls": {
          "url": "examples/ko/controls/DragControls",
          "methods": ["activate", "deactivate", "dispose", "getObjects"],
          "props": ["enabled", "transformGroup"]
        },
        "FirstPersonControls": {
          "url": "examples/ko/controls/FirstPersonControls",
          "methods": ["dispose", "handleResize", "lookAt", "lookAt", "update"],
          "props": [
            "activeLook",
            "autoForward",
            "constrainVertical",
            "domElement",
            "enabled",
            "heightCoef",
            "heightMax",
            "heightMin",
            "heightSpeed",
            "lookVertical",
            "lookSpeed",
            "mouseDragOn",
            "movementSpeed",
            "object",
            "verticalMax",
            "verticalMin"
          ]
        },
        "FlyControls": {
          "url": "examples/ko/controls/FlyControls",
          "methods": ["dispose", "update"],
          "props": [
            "autoForward",
            "domElement",
            "dragToLook",
            "movementSpeed",
            "object",
            "rollSpeed"
          ]
        },
        "OrbitControls": {
          "url": "examples/ko/controls/OrbitControls",
          "methods": [
            "dispose",
            "getAzimuthalAngle",
            "getPolarAngle",
            "listenToKeyEvents",
            "reset",
            "saveState",
            "update"
          ],
          "props": [
            "autoRotate",
            "autoRotateSpeed",
            "dampingFactor",
            "domElement",
            "enabled",
            "enableDamping",
            "enablePan",
            "enableRotate",
            "enableZoom",
            "keyPanSpeed",
            "keys",
            "maxAzimuthAngle",
            "maxDistance",
            "maxPolarAngle",
            "maxZoom",
            "minAzimuthAngle",
            "minDistance",
            "minPolarAngle",
            "minZoom",
            "mouseButtons",
            "object",
            "panSpeed",
            "position0",
            "rotateSpeed",
            "screenSpacePanning",
            "target0",
            "target",
            "touches",
            "zoom0",
            "zoomSpeed"
          ]
        },
        "PointerLockControls": {
          "url": "examples/ko/controls/PointerLockControls",
          "methods": [
            "connect",
            "disconnect",
            "getDirection",
            "lock",
            "moveForward",
            "moveRight",
            "unlock"
          ],
          "props": ["domElement", "isLocked", "maxPolarAngle", "minPolarAngle"]
        },
        "TrackballControls": {
          "url": "examples/ko/controls/TrackballControls",
          "methods": [
            "checkDistances",
            "dispose",
            "handleResize",
            "panCamera",
            "reset",
            "rotateCamera",
            "update",
            "zoomCamera"
          ],
          "props": [
            "domElement",
            "dynamicDampingFactor",
            "enabled",
            "keys",
            "maxDistance",
            "minDistance",
            "mouseButtons",
            "noPan",
            "noRotate",
            "noZoom",
            "object",
            "panSpeed",
            "rotateSpeed",
            "screen",
            "staticMoving",
            "zoomSpeed"
          ]
        },
        "TransformControls": {
          "url": "examples/ko/controls/TransformControls",
          "methods": [
            "attach",
            "detach",
            "dispose",
            "getMode",
            "setMode",
            "setRotationSnap",
            "setSize",
            "setSpace",
            "setTranslationSnap"
          ],
          "props": [
            "axis",
            "camera",
            "domElement",
            "dragging",
            "enabled",
            "mode",
            "object",
            "rotationSnap",
            "showX",
            "showY",
            "showZ",
            "size",
            "space",
            "translationSnap"
          ]
        }
      }
    }
  },
  "ja": {
    "マニュアル": {
      "はじめてみましょう": {
        "シーンの作成": {
          "url": "manual/ja/introduction/Creating-a-scene",
          "methods": [],
          "props": []
        },
        "インストールの方法": {
          "url": "manual/ja/introduction/Installation",
          "methods": [],
          "props": []
        },
        "サポートしているブラウザ": {
          "url": "manual/ja/introduction/Browser-support",
          "methods": [],
          "props": []
        },
        "WebGLの互換性の確認": {
          "url": "manual/ja/introduction/WebGL-compatibility-check",
          "methods": [],
          "props": []
        },
        "localで実行する方法": {
          "url": "manual/ja/introduction/How-to-run-things-locally",
          "methods": [],
          "props": []
        },
        "線を引く": {
          "url": "manual/ja/introduction/Drawing-lines",
          "methods": [],
          "props": []
        },
        "テキストを作成する": {
          "url": "manual/ja/introduction/Creating-text",
          "methods": [],
          "props": []
        },
        "3Dモデルをロードする": {
          "url": "manual/ja/introduction/Loading-3D-models",
          "methods": [],
          "props": []
        },
        "ライブラリとプラグイン": {
          "url": "manual/ja/introduction/Libraries-and-Plugins",
          "methods": [],
          "props": []
        },
        "FAQ": {
          "url": "manual/ja/introduction/FAQ",
          "methods": [],
          "props": []
        },
        "役にたつリンク集": {
          "url": "manual/ja/introduction/Useful-links",
          "methods": [],
          "props": []
        }
      },
      "次の段階": {
        "更新の仕方": {
          "url": "manual/ja/introduction/How-to-update-things",
          "methods": [],
          "props": []
        },
        "オブジェクトを廃棄する方法": {
          "url": "manual/ja/introduction/How-to-dispose-of-objects",
          "methods": [],
          "props": []
        },
        "VRコンテンツの作り方": {
          "url": "manual/ja/introduction/How-to-create-VR-content",
          "methods": [],
          "props": []
        },
        "post-processingの使い方": {
          "url": "manual/ja/introduction/How-to-use-post-processing",
          "methods": [],
          "props": []
        },
        "行列の変換": {
          "url": "manual/ja/introduction/Matrix-transformations",
          "methods": [],
          "props": []
        },
        "アニメーションシステム": {
          "url": "manual/ja/introduction/Animation-system",
          "methods": [],
          "props": []
        }
      },
      "ビルドツール": {
        "NPMでテストを実行する": {
          "url": "manual/ja/buildTools/Testing-with-NPM",
          "methods": [],
          "props": []
        }
      }
    }
  }
}
